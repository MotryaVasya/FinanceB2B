from aiogram.utils.keyboard import InlineKeyboardBuilder

from project.bot.messages.mesage_transaction import PAGE_SIZE

async def build_pagination_keyboard_for_show(page: int, total_pages: int, user_id: int):
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="<", callback_data=f"transactions_prev_{user_id}")  # –ù–∞ 1 –Ω–∞–∑–∞–¥
    
    if page < total_pages - 1:
        builder.button(text=">", callback_data=f"transactions_next_{user_id}")  # –ù–∞ 1 –≤–ø–µ—Ä–µ–¥
    
    if page >= 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page >= 5:
            builder.button(text="<<", callback_data=f"transactions_back5_{user_id}")  # –ù–∞ 5 –Ω–∞–∑–∞–¥
        else:
            builder.button(text="<<", callback_data=f"transactions_first_{user_id}")  # –í –Ω–∞—á–∞–ª–æ
    
    if page < total_pages - 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page + 5 < total_pages:
            builder.button(text=">>", callback_data=f"transactions_forward5_{user_id}")  # –ù–∞ 5 –≤–ø–µ—Ä–µ–¥
        else:
            builder.button(text=">>", callback_data=f"transactions_last_{user_id}")  # –í –∫–æ–Ω–µ—Ü

    builder.adjust(2, 2)
    return builder.as_markup()

async def build_pagination_keyboard_for_update(page: int, total_pages: int, user_id: int):
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="<", callback_data=f"transactionU_prev_{user_id}")  # –ù–∞ 1 –Ω–∞–∑–∞–¥
    
    builder.button(text="–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data=f"transactionU_choose_{user_id}")
    
    if page < total_pages - 1:
        builder.button(text=">", callback_data=f"transactionU_next_{user_id}")  # –ù–∞ 1 –≤–ø–µ—Ä–µ–¥

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ –≤ –∫—Ä–∞–π–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    if page >= 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page >= 5:
            builder.button(text="<<", callback_data=f"transactionU_back5_{user_id}")  # –ù–∞ 5 –Ω–∞–∑–∞–¥
        else:
            builder.button(text="<<", callback_data=f"transactionU_first_{user_id}")  # –í –Ω–∞—á–∞–ª–æ
    
    if page < total_pages - 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page + 5 < total_pages:
            builder.button(text=">>", callback_data=f"transactionU_forward5_{user_id}")  # –ù–∞ 5 –≤–ø–µ—Ä–µ–¥
        else:
            builder.button(text=">>", callback_data=f"transactionU_last_{user_id}")  # –í –∫–æ–Ω–µ—Ü

    builder.adjust(3, 2)
    return builder.as_markup()

from aiogram.utils.keyboard import InlineKeyboardBuilder

async def build_pagination_keyboard_for_categories(page: int, total_pages: int, user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="<", callback_data=f"tx_categories_prev_{user_id}")
        if page < total_pages - 1:
            builder.button(text=">", callback_data=f"tx_categories_next_{user_id}")
        if page >= 5:
            builder.button(text="<<", callback_data=f"tx_categories_back5_{user_id}")
        if page + 5 < total_pages:
            builder.button(text=">>", callback_data=f"tx_categories_forward5_{user_id}")
        if page != 0:
            builder.button(text="<<", callback_data=f"tx_categories_first_{user_id}")
        if page != total_pages - 1:
            builder.button(text=">>", callback_data=f"tx_categories_last_{user_id}")
    
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"tx_categories_choose_{user_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
    
    builder.adjust(2, 2, 2, 2)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    return builder.as_markup()

async def build_category_choice_keyboard(categories: list, user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.button(
            text=category['name_category'],
            callback_data=f"addtx_category_{category['id']}"
        )
    
    builder.button(text="< –ù–∞–∑–∞–¥", callback_data=f"tx_categories_back_{user_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
    
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

async def build_pagination_keyboard_for_delete(page: int, total_pages: int, user_id: int):
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="<", callback_data=f"transactionD_prev_{user_id}")  # –ù–∞ 1 –Ω–∞–∑–∞–¥
    
    builder.button(text="–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data=f"transactionD_choose_{user_id}")
    
    if page < total_pages - 1:
        builder.button(text=">", callback_data=f"transactionD_next_{user_id}")  # –ù–∞ 1 –≤–ø–µ—Ä–µ–¥

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ –≤ –∫—Ä–∞–π–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    if page >= 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page >= 5:
            builder.button(text="<<", callback_data=f"transactionD_back5_{user_id}")  # –ù–∞ 5 –Ω–∞–∑–∞–¥
        else:
            builder.button(text="<<", callback_data=f"transactionD_first_{user_id}")  # –í –Ω–∞—á–∞–ª–æ
    
    if page < total_pages - 1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page + 5 < total_pages:
            builder.button(text=">>", callback_data=f"transactionD_forward5_{user_id}")  # –ù–∞ 5 –≤–ø–µ—Ä–µ–¥
        else:
            builder.button(text=">>", callback_data=f"transactionD_last_{user_id}")  # –í –∫–æ–Ω–µ—Ü

    builder.adjust(3, 2)
    return builder.as_markup()




async def choose_buttons_delete(user_id, page_transactions):
    builder = InlineKeyboardBuilder()
    for tx in page_transactions:
        tx_text = f"üîñ {tx['category_name']} | {tx['full_sum']:.2f} ‚ÇΩ | üìÖ {tx['date'][:10]}"
        builder.button(text=tx_text, callback_data=f"select_transactionD_{tx['id']}_{tx['description']}")
            
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"transactionD_back_{user_id}")
    builder.adjust(1)
    return builder

async def choose_buttons_update(user_id, page_transactions):
    builder = InlineKeyboardBuilder()
    for tx in page_transactions:
        tx_text = f"üîñ {tx['category_name']} | {tx['full_sum']:.2f} ‚ÇΩ | üìÖ {tx['date'][:10]}"
        builder.button(text=tx_text, callback_data=f"select_transactionU_{tx['id']}_{tx['description']}")
            
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"transactionU_back_{user_id}")
    builder.adjust(1)
    return builder

async def confirm_or_cancel_buttons():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞", callback_data=f"confirm_delete")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    builder.adjust(2) 
    return builder

async def back_menu_or_list_transactions():
    builder = InlineKeyboardBuilder()
    builder.button(text='–í–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π', callback_data='back_to_list_transactions')
    builder.button(text='–í–µ—Ä–Ω—É—Ç—Å—è –∫ –º–µ–Ω—é', callback_data='back_to_menu')
    return builder

async def retry_or_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_update")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_update")
    return builder

async def confirm_changes_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_changes")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_update")
    return builder

