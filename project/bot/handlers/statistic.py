# project/bot/handlers/statistic.py

from datetime import datetime
import httpx
import logging
from aiogram import types, Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ---
from project.bot.keyboards.reply_statistic import statistic_keyboard
from project.bot.keyboards.reply import start_keyboard # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from project.bot.keyboards.inline import (
    get_days_inline,
    get_months_inline,
    get_years_inline,
    month_keyboard
)
from project.bot.messages.statistic_message import statistic_text_start
from project.core.request_conf import URL, TRANSACTIONS, FROM_MONTH, STATISTICS
from project.db.models.category import User
# -----------------------------------------

router = Router()
user_period = {}

# --- –°–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ ---
MONTH_NAMES_NOMINATIVE = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]
MONTH_NAMES_GENITIVE = [
    "–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è",
    "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è", "–î–µ–∫–∞–±—Ä—è"
]

def get_month_name(month_number: int, case: str = 'nominative') -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –≤ –Ω—É–∂–Ω–æ–º –ø–∞–¥–µ–∂–µ."""
    if not 1 <= month_number <= 12:
        return f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü ({month_number})"
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω 'nominative' - –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    if case == 'genitive':
        return MONTH_NAMES_GENITIVE[month_number - 1]
    return MONTH_NAMES_NOMINATIVE[month_number - 1]

# --- –ù–æ–≤–∞—è —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é" ---
def get_menu_only_reply_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ú–µ–Ω—é'."""
    keyboard = [
        [KeyboardButton(text="–ú–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, is_persistent=False)
# ---------------------------------------------


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API ---
# (–û—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def get_statistics_from_month(month: int, user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        async with httpx.AsyncClient() as client:
            params = {'user_id': user_id}
            url = f"{URL}{TRANSACTIONS}{FROM_MONTH}{month}"
            logging.debug(f"Requesting monthly stats from URL: {url} with params: {params}")
            response = await client.get(url, params=params)
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü): {e}")
        raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
    except httpx.HTTPStatusError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç API (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü): {e.response.status_code} - {e.response.text}")
        api_error_detail = e.response.text
        try:
            api_error_detail = e.response.json().get("detail", api_error_detail)
        except Exception:
            pass
        raise ValueError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.response.status_code}: {api_error_detail}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü: {e}")
        raise

async def get_statistics_from_period(data: dict) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        async with httpx.AsyncClient() as client:
            url = f"{URL}{TRANSACTIONS}{STATISTICS}"
            logging.debug(f"Requesting period stats from URL: {url} with params: {data}")
            response = await client.get(url, params=data)
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥): {e}")
        raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
    except httpx.HTTPStatusError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç API (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥): {e.response.status_code} - {e.response.text}")
        api_error_detail = e.response.text
        try:
            api_error_detail = e.response.json().get("detail", api_error_detail)
        except Exception:
            pass
        raise ValueError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.response.status_code}: {api_error_detail}")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        raise


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
# (show_statistic_menu, show_period_choice, show_month_choice –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistic_menu(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        text = await statistic_text_start()
        await message.answer(text, reply_markup=statistic_keyboard) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(F.text == "–ó–∞ –ø–µ—Ä–∏–æ–¥")
async def show_period_choice(message: types.Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    user_id = message.from_user.id
    user_period[user_id] = {"step": "from", "user_id": user_id}
    logging.info(f"User {user_id} started period selection.")
    await message.answer(
        "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–¥–µ–Ω—å –Ω–∞—á–∞–ª–∞** –ø–µ—Ä–∏–æ–¥–∞:",
        reply_markup=get_days_inline(),
        parse_mode=ParseMode.MARKDOWN
    )

@router.message(F.text == "–ó–∞ –º–µ—Å—è—Ü")
async def show_month_choice(message: types.Message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await message.answer(
        "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ **–º–µ—Å—è—Ü** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=month_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )

# --- –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" ---
@router.message(F.text == "–ú–µ–Ω—é")
async def go_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=await start_keyboard() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
# -----------------------------------------------------------------------


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ ---
# (select_day, select_month –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.callback_query(F.data.startswith("day_"))
async def select_day(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    user_id = callback.from_user.id
    if user_id not in user_period:
        await callback.message.edit_text("ü§∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–∞–≤ '–ó–∞ –ø–µ—Ä–∏–æ–¥'.")
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    try:
        day = int(callback.data.split("day_")[1])
        step = user_period[user_id].get("step", "from")
        user_period[user_id][f"{step}_day"] = day
        logging.info(f"User {user_id} selected day {day} for step '{step}'.")

        await callback.message.edit_text(
            f"üóìÔ∏è –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å {('–Ω–∞—á–∞–ª–∞' if step == 'from' else '–∫–æ–Ω—Ü–∞')}: {day}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–º–µ—Å—è—Ü**:",
            reply_markup=get_months_inline(),
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.answer()
    except (IndexError, ValueError):
        logging.warning(f"Invalid day callback data from user {user_id}: {callback.data}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω—è.", show_alert=True)
    except TelegramAPIError as e:
        logging.error(f"Telegram API error during day selection for user {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith("month_"))
async def select_month(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞."""
    user_id = callback.from_user.id
    current_step = user_period.get(user_id, {}).get("step")
    if not current_step or f"{current_step}_day" not in user_period.get(user_id, {}):
        await callback.message.edit_text("ü§∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å –≤—ã–±–æ—Ä–∞ –¥–Ω—è.")
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ (–≤—ã–±–æ—Ä –¥–Ω—è) –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", show_alert=True)
        return

    try:
        month_num = int(callback.data.split("month_")[1])
        step = user_period[user_id].get("step", "from")
        user_period[user_id][f"{step}_month"] = month_num
        logging.info(f"User {user_id} selected month {month_num} for step '{step}'.")

        month_name = get_month_name(month_num) # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        await callback.message.edit_text(
            f"üóìÔ∏è –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü {('–Ω–∞—á–∞–ª–∞' if step == 'from' else '–∫–æ–Ω—Ü–∞')}: **{month_name}**. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–≥–æ–¥**:",
            reply_markup=get_years_inline(),
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.answer()
    except (IndexError, ValueError):
        logging.warning(f"Invalid month callback data from user {user_id}: {callback.data}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞.", show_alert=True)
    except TelegramAPIError as e:
        logging.error(f"Telegram API error during month selection for user {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith("year_"))
async def select_year(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ–¥–∞ –∏ –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, –ª–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    user_id = callback.from_user.id
    current_step = user_period.get(user_id, {}).get("step")
    if not current_step or f"{current_step}_month" not in user_period.get(user_id, {}):
        await callback.message.edit_text("ü§∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞.")
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ (–≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞) –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", show_alert=True)
        return

    try:
        year = int(callback.data.split("year_")[1])
        step = user_period[user_id].get("step", "from")
        user_period[user_id][f"{step}_year"] = year
        logging.info(f"User {user_id} selected year {year} for step '{step}'.")

        if step == "from":
            user_period[user_id]["step"] = "to"
            from_month_name = get_month_name(user_period[user_id]['from_month'], case='genitive')
            await callback.message.edit_text(
                f"üóìÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: **{user_period[user_id]['from_day']:02d} {from_month_name} {user_period[user_id]['from_year']} –≥.**\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **–¥–µ–Ω—å –∫–æ–Ω—Ü–∞** –ø–µ—Ä–∏–æ–¥–∞:",
                reply_markup=get_days_inline(),
                parse_mode=ParseMode.MARKDOWN
            )
            await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        else: # step == "to"
            d = user_period[user_id]
            try:
                from_dt = datetime(d["from_year"], d["from_month"], d["from_day"]).date()
                to_dt = datetime(d["to_year"], d["to_month"], d["to_day"]).date()

                if from_dt > to_dt:
                    await callback.message.edit_text(
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=None # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                    )
                    del user_period[user_id]
                    await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
                    return

                from_date_iso = from_dt.isoformat()
                to_date_iso = to_dt.isoformat()
                

                data = {"user_id": user_id, "from_date": from_date_iso, "to_date": to_date_iso}
                logging.info(f"Requesting stats for user {user_id} for period {from_date_iso} to {to_date_iso}")

                stats = await get_statistics_from_period(data)

                # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                income_data = stats.get('income', {})
                expense_data = stats.get('expense', {})
                income = income_data.get('sum', 0) if isinstance(income_data, dict) else income_data
                expense = expense_data.get('sum', 0) if isinstance(expense_data, dict) else expense_data

                top_categories = stats.get('top_categories', [])
                from_dt_str = from_dt.strftime('%d.%m.%Y')
                to_dt_str = to_dt.strftime('%d.%m.%Y')

                text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_dt_str} ‚Äì {to_dt_str}:\n\n"
                    f"üìà –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\n"
                    f"üìâ –†–∞—Å—Ö–æ–¥—ã: {expense} ‚ÇΩ\n\n"
                    f"üî• –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:"
                )
                if top_categories:
                    text += "\n"
                    for idx, item in enumerate(top_categories, 1):
                        category_name = item.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                        amount = item.get('amount', 0)
                        text += f"{idx}) {category_name} ‚Äî **{amount}** ‚ÇΩ\n"
                        if idx >= 3: break
                    for i in range(len(top_categories) + 1, 4):
                        text += f"{i}) ‚Äî ‚Äî\n"
                else:
                    text += " –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                # ---------------------------------------------------

                # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
                await callback.message.answer(text, reply_markup=get_menu_only_reply_keyboard())
                await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.") # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                logging.info(f"Successfully displayed period stats for user {user_id} and cleared state.")
                del user_period[user_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

  

            except (KeyError, ValueError) as e:
                logging.error(f"Data or API response error for period stats user {user_id}: {e}. Current state: {user_period.get(user_id)}")
                error_message = f"ü§∑ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω–æ–≤–æ."
                if isinstance(e, ValueError) and "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É" in str(e):
                    error_message = f"üò• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}"
                await callback.message.edit_text(error_message, reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                if user_id in user_period: del user_period[user_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            except ConnectionError as e:
                logging.error(f"API connection error getting period stats for user {user_id}: {e}")
                await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                if user_id in user_period: del user_period[user_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.", show_alert=True)
            except Exception as e:
                logging.exception(f"Unexpected error during period stats processing for user {user_id}: {e}")
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. üò•", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                if user_id in user_period: del user_period[user_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await callback.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)

    except (IndexError, ValueError):
        logging.warning(f"Invalid year callback data from user {user_id}: {callback.data}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–¥–∞.", show_alert=True)
    except TelegramAPIError as e:
        logging.error(f"Telegram API error during year selection/processing for user {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.exception(f"Critical error in select_year for user {user_id}: {e}")
        await callback.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.", show_alert=True)
        try:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. üò•", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            if user_id in user_period: del user_period[user_id] # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as inner_e:
            logging.error(f"Failed to send recovery message to user {user_id}: {inner_e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü (Inline –∫–Ω–æ–ø–∫–∞) ---
@router.callback_query(F.data.startswith("statistic_month_"))
async def show_statistic_for_month(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü."""
    user_id = callback.from_user.id
    try:
        month_num_str = callback.data.split("statistic_month_")[1]
        month_num = int(month_num_str)

        if not 1 <= month_num <= 12:
            raise ValueError(f"Invalid month number: {month_num}")

        logging.info(f"User {user_id} requested stats for month {month_num}.")

        stats = await get_statistics_from_month(month_num, user_id)

        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        month_name = get_month_name(month_num) # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        income_data = stats.get('income', {})
        expense_data = stats.get('expense', {})
        income = income_data.get('sum', 0) if isinstance(income_data, dict) else income_data
        expense = expense_data.get('sum', 0) if isinstance(expense_data, dict) else expense_data
        top_categories = stats.get("top_categories", [])

        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}:\n\n" # –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
        text += f"üìà –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\n" \
                f"üìâ –†–∞—Å—Ö–æ–¥—ã: {expense} ‚ÇΩ\n\n" \
                f"üî• –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:"

        if top_categories:
            text += "\n"
            for idx, item in enumerate(top_categories, 1):
                category_name = item.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                amount = item.get("amount", 0)
                text += f"{idx}) {category_name} ‚Äî **{amount}** ‚ÇΩ\n"
                if idx >= 3: break
            for i in range(len(top_categories) + 1, 4):
                text += f"{i}) ‚Äî ‚Äî\n"
        else:
            text += " –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        # ---------------------------------------------------

        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
        await callback.message.answer(text, reply_markup=get_menu_only_reply_keyboard())
        logging.info(f"Successfully displayed monthly stats for user {user_id}.")
        await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.") # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫


    except (IndexError, ValueError) as e:
        logging.warning(f"Invalid data or API response error for user {user_id}: {callback.data} - {e}")
        error_message = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Å—è—Ü–∞ ({e})."
        if isinstance(e, ValueError) and "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É" in str(e):
            error_message = f"üò• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}"
        await callback.answer(error_message, show_alert=True)
        try:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {error_message}", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        except TelegramAPIError: pass
    except ConnectionError as e:
        logging.error(f"API connection error getting monthly stats for user {user_id}: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}", show_alert=True)
        try:
            await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        except TelegramAPIError: pass
    except TelegramAPIError as e:
        logging.error(f"Telegram API error during monthly stats display for user {user_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.exception(f"Unexpected error during monthly stats processing for user {user_id}: {e}")
        await callback.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", show_alert=True)
        try:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. üò•", reply_markup=None) # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        except TelegramAPIError: pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é", –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ –ø—Ä–æ—à–ª–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, —É–¥–∞–ª–µ–Ω,
# --- —Ç.–∫. —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è F.text == "–ú–µ–Ω—é"