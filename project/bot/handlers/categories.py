from aiogram import Router, types, F
from aiogram.types import Message
from project.bot.states import *
import re
from project.bot.Save import save
from project.bot.messages.messages import *
from aiogram.types import KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import or_f,StateFilter,and_f
from project.bot.keyboards.reply import *
from project.bot.Save import save, save_user_data

def validate_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –î–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    2. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
    3. –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ @#$% –∏ —Ç.–ø.
    4. –ù–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞)
    
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if len(name) == 0 or len(name) > 50:
        return False
    
    if not name[0].isalnum():
        return False
    
    for char in name:
        if not (char.isalnum() or char in (' ', '-', '_')):
            return False
    
    if all(char.isdigit() for char in name if char.isalnum()):
        return False
    
    if not any(char.isalpha() for char in name):
        return False
    
    return True

router = Router()

@router.callback_query(F.data.startswith("user_cat:"))
async def process_user_category_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
    """
    category_name = callback_query.data.split(":", 1)[1]
    user_id = callback_query.from_user.id

    try:
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
        await callback_query.message.edit_text(
            f"üìÇ –°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n–í—ã –≤—ã–±—Ä–∞–ª–∏: *{category_name}*",
            parse_mode="Markdown",
            reply_markup=callback_query.message.reply_markup
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ process_user_category_callback: {e.__class__.__name__}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.", show_alert=True)

@router.callback_query(F.data == "back_to_category_options")
async def process_back_to_category_options(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...")
        await callback_query.message.delete()
        await callback_query.message.answer(
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n–ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
            reply_markup=await get_categories_keyboard()
        )
        await state.clear()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ process_back_to_main_menu: {e.__class__.__name__}: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.", show_alert=True)

@router.message(or_f(F.text== "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",F.text=="–í–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"))
async def skip_name(message: types.Message, state: FSMContext):
    await state.set_state(CategoryStates.waiting_for_delete_category)
    try:
        user_id = message.from_user.id
        open("show_categories.txt", "w").write(str(await save.update(user_id, "DELETE_CATEGORY")))
        await message.answer(
            "üôÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n",
            reply_markup=await delete_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(or_f(StateFilter(CategoryStates.waiting_for_delete_category),F.text=="–ùa–∑–∞–¥"))
async def delete_categories(message: Message, state: FSMContext):
    try:
        await message.answer(
            "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n",
            reply_markup=await delete_keyboard_affter()
        )
        await state.clear()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def delete_categories(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üóë –ì–æ—Ç–æ–≤–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
        await state.set_state(CategoryStates.waiting_for_delete_deny)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")


@router.message(or_f(F.text=="–û—Ç–º–µ–Ω–∞",CategoryStates.waiting_for_delete_deny))
async def delete_den(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
        "üôÇ –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
        reply_markup=await deny_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–üe—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
async def delete_menu(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n"
        "–ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
        reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
async def show_categories_list(message: Message):
    user_id = message.from_user.id
    open("show_categories.txt", "w").write(str(await save.update(user_id, "SHOW_CATEGORIES")))
    if user_id not in user_state_history:
        user_state_history[user_id] = []
    user_state_history[user_id].append("show_categories_list")
    try:
        await message.answer(
            "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
            reply_markup=await get_all_categories()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ï—â–µ")
async def show_temp_categories_list(message: Message):
    user_id = message.from_user.id
    try:
        current_user_categories = user_categories
        if not current_user_categories:
             await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
             return
        await message.answer(
            "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä\n"
            "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ - –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ)",
            reply_markup=await create_user_categories_inline_keyboard(current_user_categories)
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ show_temp_categories_list: {e.__class__.__name__}: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    open("main44.txt", "w").write(str(await save.update(user_id, "ADD_CATEGORY")))
    await state.set_state(CategoryStates.waiting_for_category_name)
    await message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup= await add_back_button(ReplyKeyboardMarkup(keyboard=[]))
    )

@router.message(CategoryStates.waiting_for_category_name)
async def process_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.text.strip()
    if not validate_name(name):
        await message.answer(
            """üòï –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n
ÔøΩ–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª:\n
1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º ‚Äî –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n
2. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤).\n
3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ @, #, $, % –∏ —Ç.–ø.\n
"""
        )
        return
    
    await save_user_data.update_dict(user_id, {'category_name': name})
    await message.answer(
        "üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup= await gety_type_keyboard()
    )
    await state.set_state(CategoryStates.waiting_for_category_type)

@router.message(CategoryStates.waiting_for_category_type, F.text.in_(["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]))
async def set_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    open("select_category.txt", "w").write(str(await save.update(user_id, "DOHOD")))
    category_type = message.text.lower() 
    user_data = await save_user_data.find_element_by_user_id(user_id)
    if user_data is None or 'category_name' not in user_data:
        await message.answer("üòï –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ (/start –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é').")
        await state.clear()
        return       
    await save_user_data.update_dict(user_id, {"type": category_type})

    try:
        await state.set_state(CategoryStates.waiting_for_save_confirmation)
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup=await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e.__class__.__name__}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é.")
        await state.clear()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def show_categories(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    open("main44.txt", "w").write(str(await save.update(user_id, "EDIT_CATEGORY")))
    try:
        await message.answer(
            "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=await make_categories_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text.in_([f"{cat['name']} ({cat['type']})" for cat in user_categories]))
async def select_category(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    open("select_category.txt", "w").write(str(await save.update(user_id, "EDIT_SELECT_CATEGORY")))
    
    try:
        category_name = message.text.split(' (')[0]
        
        user_data[user_id] = {"current_category": category_name}
        await message.answer(
            f"‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=await make_skip_keyboard()
        )
        await state.set_state(CategoryStates.new_category_name)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def skip_name(message: types.Message, state: FSMContext):
    
    user_id = message.from_user.id
    open("select_category.txt", "w").write(str(await save.update(user_id, "EDIT_SELECT_CATEGORY_TYPE")))
    if not user_data.get(user_id):
        return await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    try:
        await state.clear()
        await state.set_state(CategoryStates.first)
        await message.answer(
            "üîÑ –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Ç–∏–ø –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòä",
            reply_markup= await make_type_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(StateFilter(CategoryStates.new_category_name))
async def handle_text_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_data and "current_category" in user_data[user_id]:
        old_name = user_data[user_id]["current_category"]
        user_data[user_id]["current_category"]=message.text
        try:
            await state.clear()
            await message.answer(
                "üéâ –£—Ä–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n"
                "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø üòä\n",
                reply_markup=await make_type_keyboard()
            )
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")


@router.message(F.text.in_(["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]))
async def set_type(message: types.Message):
    user_id = message.from_user.id
    open("select_category.txt", "w").write(str(await save.update(user_id, "DOHOD")))
    if user_data[user_id]["type"] is None:
        user_data[user_id]["type"] = message.text.lower()
    try:
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup=await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∏–ø")
async def set_type(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    if current_state == CategoryStates.first.state:
        await state.set_state(CategoryStates.second)
        await message.answer(
            "üòï –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n –•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å?\n",
            reply_markup=await add_back_button(await aboba_keyboard())
        )
        open("select_category.txt", "w").write(str(await save.update(user_id, "TWO_SKIP")))
        return
    
    try:
        if user_data.get(user_id).get("type") is not None:
            await message.answer(
                "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
                reply_markup=await make_save_keyboard()
            )
            await state.clear()
        else:
            await message.answer(
                "–ù—É –ª–∞–¥–Ω–æ, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ!üòï\n üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=await start_keyboard()
            )
            await state.clear()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(CategoryStates.waiting_for_save_confirmation, F.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def save_changes(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_info = await save_user_data.find_element_by_user_id(user_id)

    if user_info is None or 'category_name' not in user_info or 'type' not in user_info:
        await message.answer(
            "üòï –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞.",
             reply_markup=await start_keyboard()
             )
        await state.clear()
        return

    try:
        category_name = user_info['category_name']
        category_type = user_info['type']
        user_id = user_info[user_id]
        
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name} ({category_type}) –¥–ª—è {user_id}. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ —É–¥–∞–ª–µ–Ω—ã.")

        await message.answer(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' ({category_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞üòä\n"
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
                reply_markup=await start_keyboard()
            )
        await state.clear()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e.__class__.__name__}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=await start_keyboard()
        )
        await state.clear()

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")
async def set_type(message: types.Message):
    try:
        await message.answer(
            "üëå –í—Å—ë –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –µ—Å—Ç—å! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å üòä\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
