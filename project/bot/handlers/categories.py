from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from project.bot.conecting_methods.category import create_category, delete_category, get_categories, get_category, update_category
from project.bot.conecting_methods.methods import check_category_action
from project.bot.keyboards.inline_categories import (build_pagination_keyboard_for_delete, 
                                                     build_pagination_keyboard_for_show, 
                                                     build_pagination_keyboard_for_update, 
                                                     choose_buttons_delete, 
                                                     choose_buttons_update, 
                                                     confirm_back_cancel, 
                                                     confirm_or_cancel_buttons, 
                                                     income_expence_back_cancel)
from project.bot.states import *
from project.bot.messages.messages import *
from aiogram.fsm.context import FSMContext
from project.bot.keyboards.reply import *
from project.bot.messages.mesage_transaction import PAGE_SIZE, get_paginated_category, user_pages

def validate_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –î–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    2. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
    3. –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ @#$% –∏ —Ç.–ø.
    4. –ù–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞)
    
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if len(name) == 0 or len(name) > 50:
        return False
    
    if not name[0].isalnum():
        return False
    
    for char in name:
        if not (char.isalnum() or char in (' ', '-', '_')):
            return False
    
    if all(char.isdigit() for char in name if char.isalnum()):
        return False
    
    if not any(char.isalpha() for char in name):
        return False
    
    return True

router = Router()

class CategoryForm(StatesGroup):
    name = State()
    type = State()
    confirmation = State() 

class UpdateCategoryForm(StatesGroup):
    select_category = State()
    new_name = State()
    new_type = State()
    confirmation = State()

# ----------------------------------------------------------- start add_category
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def start_add_category(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(CategoryForm.name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    await message.answer(
        "üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "\n"
        "‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "üîπ –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "üîπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã\n"
        "üîπ –†–∞–∑—Ä–µ—à–µ–Ω—ã –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è\n"  
        "üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞\n"  
        "üîπ –ù–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä\n"
        "\n"
        "‚ú® –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–ø–∏—Å—è—Ö!\n",
        reply_markup=keyboard.as_markup()
    )
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(CategoryForm.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞"""
    name = message.text.strip()
    
    if not validate_name(name):
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n\n"
            "üîπ –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "üîπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã\n"
            "üîπ –†–∞–∑—Ä–µ—à–µ–Ω—ã –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è\n"  
            "üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞\n"  
            "üîπ –ù–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä\n",
            reply_markup=keyboard.as_markup()
        )
        return
    
    await state.update_data(name=name)
    await state.set_state(CategoryForm.type)
    
    keyboard = await income_expence_back_cancel()
    
    await message.answer(
        "üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:\n",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("type_"), CategoryForm.type)
async def process_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    type_value = int(callback.data.split('_')[1])
    await state.update_data(type=type_value)
    await state.set_state(CategoryForm.confirmation)
    
    data = await state.get_data()
    category_type = "–î–æ—Ö–æ–¥" if type_value == 1 else "–†–∞—Å—Ö–æ–¥"
    
    keyboard = await confirm_back_cancel()
    
    await callback.message.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º üí´\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–¢–∏–ø: {category_type}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?üòä\n",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_creation", CategoryForm.confirmation)
async def confirm_creation(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    try:
        category_data = {
            "name_category": data['name'],
            "type": data['type'],
        }
        
        await create_category(category_data, {"user_id": user_id})
        await callback.message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–¢–∏–ø: {'–î–æ—Ö–æ–¥' if data['type'] == 1 else '–†–∞—Å—Ö–æ–¥'}\n\n"
            f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–º–∞–Ω–¥—ã /add_category"
        )
    finally:
        await state.clear()
        await callback.answer()

@router.callback_query(F.data == "back_to_name")
async def back_to_name_step(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(CategoryForm.name)
    data = await state.get_data()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    
    await callback.message.edit_text(
        "üí° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "\n"
        "‚ùï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "üîπ –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "üîπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã\n"
        "üîπ –†–∞–∑—Ä–µ—à–µ–Ω—ã –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è\n"  
        "üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞\n"  
        "üîπ –ù–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä\n"
        "\n"
        "‚ú® –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –æ–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–ø–∏—Å—è—Ö!\n",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_type", CategoryForm.confirmation)
async def back_to_type_step(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(CategoryForm.type)
    
    keyboard = await income_expence_back_cancel()
    
    await callback.message.edit_text(
        "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_creation")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await start_keyboard())
    await callback.answer()
# ----------------------------------------------------------- end add_category

# ----------------------------------------------------------- start show_categories
@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö')
async def show_category(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    try:
        message_text, total_pages = await get_paginated_category(user_id, 0, True)
        keyboard = await build_pagination_keyboard_for_show(0, total_pages, user_id)
        await message.answer(message_text, reply_markup=keyboard)
        await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

@router.callback_query(F.data.startswith("categories_"))
async def handle_pagination_for_show(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_categories = await get_categories(user_id)
        total_pages = (len(all_categories) + PAGE_SIZE - 1) // PAGE_SIZE
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = await check_category_action(action, total_pages, current_page, callback)
        
        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_category(user_id, new_page, True)
        keyboard = await build_pagination_keyboard_for_show(new_page, total_pages, user_id)
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def format_categories_page(categories: list, page: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    start_idx = page * PAGE_SIZE
    page_categories = categories[start_idx:start_idx + PAGE_SIZE]
    
    formatted = []
    for cat in page_categories:
        try:
            name = cat['name_category'].encode('utf-8').decode('utf-8')
        except:
            name = cat['name_category']
        
        cat_type = '–î–æ—Ö–æ–¥' if cat['type'] == 1 else '–†–∞—Å—Ö–æ–¥'
        formatted.append(
            f"üîñ {name}\n"
            f"üìù –¢–∏–ø: {cat_type}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
    
    total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
    header = "–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üìÇ:\n\n"
    message = header + "\n\n".join(formatted)
    message += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}"
    
    return message

async def income_expence_back_cancel_keep():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å'"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–æ—Ö–æ–¥", callback_data="type_1")
    keyboard.button(text="–†–∞—Å—Ö–æ–¥", callback_data="type_2")
    keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_name_update")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_update")
    keyboard.button(text="–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="keep_type")
    keyboard.adjust(2, 2, 1)
    return keyboard

async def confirm_back_cancel_for_update():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_update")
    keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø", callback_data="back_to_type_update")
    keyboard.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="back_to_name_update")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_update")
    keyboard.adjust(2, 2)
    return keyboard
# ----------------------------------------------------------- end show_categories

# ----------------------------------------------------------- start update
@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def start_update_category(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–¥–µ –µ—Å—Ç—å user_id)
        all_categories = await get_categories(user_id)
        user_categories = [cat for cat in all_categories if cat.get('user_id')]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ state
        await state.update_data(all_categories=user_categories)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        message_text = await format_categories_page(user_categories, 0)
        total_pages = max(1, (len(user_categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        keyboard = await build_pagination_keyboard_for_update(0, total_pages, user_id)
        
        await message.answer(message_text, reply_markup=keyboard)
        await message.answer(
            "‚¨ÜÔ∏è‚¨ÜÔ∏è",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

@router.callback_query(F.data.startswith("categoryU_"))
async def handle_pagination_for_update(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ state
        state_data = await state.get_data()
        user_categories = state_data.get('all_categories', [])
        total_pages = max(1, (len(user_categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä)
        if action == "choose":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_idx = current_page * PAGE_SIZE
            page_categories = user_categories[start_idx:start_idx + PAGE_SIZE]
            
            keyboard = await choose_buttons_update(user_id, page_categories)
            await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
            await callback.answer()
            return
            
        elif action == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            await state.clear()
            message_text = await format_categories_page(user_categories, current_page)
            keyboard = await build_pagination_keyboard_for_update(current_page, total_pages, user_id)
            await callback.message.edit_text(text=message_text, reply_markup=keyboard)
            await callback.answer()
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5":
            new_page = max(0, current_page - 5)
        elif action == "forward5":
            new_page = min(total_pages - 1, current_page + 5)
        elif action == "first":
            new_page = 0
        elif action == "last":
            new_page = total_pages - 1
            
        if new_page != current_page:
            user_pages[user_id] = new_page
            message_text = await format_categories_page(user_categories, new_page)
            keyboard = await build_pagination_keyboard_for_update(new_page, total_pages, user_id)
            await callback.message.edit_text(text=message_text, reply_markup=keyboard)
            
        await callback.answer()
        
    except Exception as e:
        print(f"Error in handle_pagination_for_update: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(F.data.startswith("select_categoryU_"))
async def select_category_for_update(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        data_parts = callback.data.split('_')
        category_id = int(data_parts[2])
        category_name = '_'.join(data_parts[3:])
        
        await state.update_data(
            category_id=category_id,
            current_name=category_name,
            original_message=callback.message.text
        )
        await state.set_state(UpdateCategoryForm.new_name)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"categoryU_back_{callback.from_user.id}")
        keyboard.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_name")
        
        await callback.message.edit_text(
            text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úèÔ∏è\n"
                 '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", –µ—Å–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ\n'
                 ,
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        print(f"Error in select_category_for_update: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.callback_query(F.data == "keep_name", UpdateCategoryForm.new_name)
async def keep_current_name(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    await state.update_data(new_name=data['current_name'])
    await state.set_state(UpdateCategoryForm.new_type)
    
    keyboard = await income_expence_back_cancel_keep()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîÑ\n"
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", –µ—Å–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ\n',
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.message(UpdateCategoryForm.new_name)
async def process_new_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.update_data(new_name=message.text)
    await state.set_state(UpdateCategoryForm.new_type)
    
    keyboard = await income_expence_back_cancel_keep()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîÑ\n"
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π", –µ—Å–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ\n',
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(F.data.startswith("type_"), UpdateCategoryForm.new_type)
async def process_new_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    type_value = int(callback.data.split('_')[1])
    await state.update_data(new_type=type_value)
    await state.set_state(UpdateCategoryForm.confirmation)
    
    data = await state.get_data()
    category_type = "–î–æ—Ö–æ–¥" if type_value == 1 else "–†–∞—Å—Ö–æ–¥"
    
    keyboard = await confirm_back_cancel_for_update()
    await callback.message.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üîç:\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data['current_name']}\n"
        f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data['new_name']}\n"
        f"–ù–æ–≤—ã–π —Ç–∏–ø: {category_type}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "keep_type", UpdateCategoryForm.new_type)
async def keep_current_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞"""
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    category = await get_category(data['category_id'])
    await state.update_data(new_type=category['type'])
    await state.set_state(UpdateCategoryForm.confirmation)
    
    category_type = "–î–æ—Ö–æ–¥" if category['type'] == 1 else "–†–∞—Å—Ö–æ–¥"
    
    keyboard = await confirm_back_cancel_for_update()
    await callback.message.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üîç:\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data['current_name']}\n"
        f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data['new_name']}\n"
        f"–¢–∏–ø –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {category_type}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_type_update", UpdateCategoryForm.confirmation)
async def back_to_type_step_update(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(UpdateCategoryForm.new_type)
    
    keyboard = await income_expence_back_cancel()
    await callback.message.edit_text(
        "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_name_update", UpdateCategoryForm.confirmation)
async def back_to_name_step_update(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(UpdateCategoryForm.new_name)
    data = await state.get_data()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"categoryU_back_{callback.from_user.id}")
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {data.get('current_name', '')}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úèÔ∏è",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_update", UpdateCategoryForm.confirmation)
async def confirm_update_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        update_data = {
            "name_category": data['new_name'],
            "type": data['new_type']
        }
        
        await update_category(data['category_id'], update_data)
        await callback.message.answer(
            text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        await callback.answer()

@router.callback_query(F.data == "cancel_update")
async def cancel_update_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await callback.message.answer(
            text="‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n",
            reply_markup=await start_keyboard()
        )
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        print(f"Error in cancel_update_category: {e}")
        await callback.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await callback.answer()
# ----------------------------------------------------------- end update

# ----------------------------------------------------------- start delete
@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def start_delete_category(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–¥–µ –µ—Å—Ç—å user_id)
        all_categories = await get_categories(user_id)
        user_categories = [cat for cat in all_categories if cat.get('user_id')]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ state
        await state.update_data(all_categories=user_categories)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        message_text = await format_categories_page(user_categories, 0)
        total_pages = max(1, (len(user_categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        keyboard = await build_pagination_keyboard_for_delete(0, total_pages, user_id)
        
        await message.answer(message_text, reply_markup=keyboard)
        await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

@router.callback_query(F.data.startswith("categoryD_"))
async def handle_pagination_for_delete(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ state
        state_data = await state.get_data()
        user_categories = state_data.get('all_categories', [])
        total_pages = max(1, (len(user_categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä)
        if action == "choose":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_idx = current_page * PAGE_SIZE
            page_categories = user_categories[start_idx:start_idx + PAGE_SIZE]
            
            keyboard = await choose_buttons_delete(user_id, page_categories)
            await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
            await callback.answer()
            return
            
        elif action == "back":
            # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            message_text = await format_categories_page(user_categories, current_page)
            keyboard = await build_pagination_keyboard_for_delete(current_page, total_pages, user_id)
            await callback.message.edit_text(text=message_text, reply_markup=keyboard)
            await callback.answer()
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5":
            new_page = max(0, current_page - 5)
        elif action == "forward5":
            new_page = min(total_pages - 1, current_page + 5)
        elif action == "first":
            new_page = 0
        elif action == "last":
            new_page = total_pages - 1
            
        if new_page != current_page:
            user_pages[user_id] = new_page
            message_text = await format_categories_page(user_categories, new_page)
            keyboard = await build_pagination_keyboard_for_delete(new_page, total_pages, user_id)
            await callback.message.edit_text(text=message_text, reply_markup=keyboard)
            
        await callback.answer()
        
    except Exception as e:
        print(f"Error in handle_pagination_for_delete: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@router.callback_query(F.data.startswith("select_categoryD_"))
async def select_category_for_delete(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        data_parts = callback.data.split('_')
        category_id = int(data_parts[2])
        category_name = '_'.join(data_parts[3:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ callback_data
        try:
            category_name = category_name.encode('utf-8').decode('utf-8')
        except:
            pass
            
        await state.update_data(
            category_id=category_id,
            category_name=category_name,
            original_message=callback.message.text
        )
        
        keyboard = await confirm_or_cancel_buttons()
        await callback.message.edit_text(
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n\n"
                 f"üîñ {category_name}\n\n"
                 f'–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"?\n'
                 f"üòä –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ!",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        print(f"Error in select_category_for_delete: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.callback_query(F.data == "confirm_delete_category")
async def confirm_delete_category(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        user_id = callback.from_user.id
        
        await delete_category(data['category_id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        all_categories = await get_categories(user_id)
        user_categories = [cat for cat in all_categories if cat.get('user_id')]
        await state.update_data(all_categories=user_categories)
        
        
        await callback.message.answer(
            text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['category_name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n",
            reply_markup=await start_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        await callback.answer()

@router.callback_query(F.data == "cancel_delete_category")
async def cancel_delete_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        await callback.message.answer(
            text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
        await callback.answer()
        await state.clear()
    except Exception as e:
        print(f"Error in cancel_delete_category: {e}")
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
# ----------------------------------------------------------- start delete

@router.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer(
            text="‚ùå –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É üòä\n\n",
            reply_markup=await start_keyboard()
        )
        await state.clear()
        await callback.answer()
    
    except Exception as e:
        print(f"Error in cancel_update_category: {e}")
        await callback.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await callback.answer()