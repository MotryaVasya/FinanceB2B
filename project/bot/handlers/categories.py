from aiogram import Router, types, F
from aiogram.types import Message
from project.bot.states import *
from project.bot.messages.messages import *
from aiogram.types import KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import or_f,StateFilter
from project.bot.keyboards.reply import *
from project.bot.Save import save
def validate_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –î–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    2. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
    3. –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ @#$% –∏ —Ç.–ø.
    4. –ù–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞)
    
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    if len(name) == 0 or len(name) > 50:
        return False
    
    if not name[0].isalnum():
        return False
    
    for char in name:
        if not (char.isalnum() or char in (' ', '-', '_')): 
            return False
    
    if all(char.isdigit() for char in name if char.isalnum()):
        return False
    
    if not any(char.isalpha() for char in name):
        return False
    
    return True



router = Router()


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
async def show_categories_list(message: Message):
    user_id = message.from_user.id
    open("show_categories.txt", "w").write(str(await save.update(user_id, "SHOW_CATEGORIES")))
    if user_id not in user_state_history:
        user_state_history[user_id] = []
    user_state_history[user_id].append("show_categories_list")
    try:
        await message.answer(
            "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
            reply_markup=await get_all_categories()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
        
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def add_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    open("main44.txt", "w").write(str(await save.update(user_id, "ADD_CATEGORY")))
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(or_f(F.text == "–î–æ—Ö–æ–¥", F.text == "–†–∞—Å—Ö–æ–¥"))
async def after_add(message: Message):
    user_id = message.from_user.id
    open("main44.txt", "w").write(str(await save.update(user_id, "AFTER_ADD")))
    try:
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é üòä"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å")
async def show_categories(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    open("main44.txt", "w").write(str(await save.update(user_id, "EDIT_CATEGORY")))
    try:
            current_state = await state.get_state()
            if current_state == Context.IN_CATEGORIES:
                await message.answer(
            "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=await make_categories_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text.in_(user_categories))
async def select_category(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    open("select_category.txt", "w").write(str(await save.update(user_id, "EDIT_SELECT_CATEGORY")))
    try:    
        user_data[user_id] = {"current_category": message.text}
        await message.answer(
            f"‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{message.text}' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup=await make_skip_keyboard()
        )
        await state.set_state(CategoryStates.new_category_name)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(StateFilter(CategoryStates.new_category_name))
async def handle_text_input(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data and "current_category" in user_data[user_id]:
        old_name = user_data[user_id]["current_category"]
        user_data[user_id]["new_name"] = message.text
        try:
            await message.answer(
                f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å '{old_name}' –Ω–∞ '{message.text}'\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=await make_type_keyboard()
            )
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def save_changes(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        category = user_data[user_id].get("current_category")
        new_type = user_data[user_id].get("type", "–Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
        try:
            await message.answer(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
                f"–¢–∏–ø: {new_type}\n\n"
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=ReplyKeyboardRemove()
            )
            user_data.pop(user_id)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", reply_markup=ReplyKeyboardRemove())

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_name(message: types.Message):
    user_id = message.from_user.id
    if not user_data.get(user_id):
        return await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    try:
        await message.answer(
            "üîÑ –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Ç–∏–ø –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòä",
            reply_markup=await make_type_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text.in_(["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]))
async def set_type(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data[user_id]["type"] = message.text.lower()
    try:
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup=await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_type(message: types.Message):
    user_id = message.from_user.id
    open("main44.txt", "w").write(str(await save.update(user_id, "SKIP_TYPE")))
    try:
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup=await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(StateFilter(CategoryStates.waiting_for_category_name))
async def process_category_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        category_name = message.text.strip()
        if not validate_name(category_name):
            await message.answer(
                "üòï –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
                "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª:\n"
                "1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º ‚Äî –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "2. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã.\n"
                "3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            )
            return
        
        await state.set_state(CategoryStates.waiting_for_category_type)
        await save.update(user_id, "PROCESS_CATEGORY_TYPE")
        await message.answer(
            text=f"üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:\n",
            reply_markup=await gety_type_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def zaglushka(message:types.Message):
    user_id = message.from_user.id
    try:
        open("add_handler.txt", "w").write(str(await save.update(user_id, "ZAGLUSHKA")))
        await message.answer("–í –°–ö–û–†–´–• –û–ë–ù–û–í–õ–ï–ù–ò–Ø–•‚ùóÔ∏èüîú")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")