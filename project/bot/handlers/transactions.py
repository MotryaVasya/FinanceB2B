from aiogram import Router, F
import re
from aiogram.filters import or_f,StateFilter,and_f
from aiogram.types import Message, CallbackQuery,ReplyKeyboardRemove
from project.bot.conecting_methods.methods import check_action
from project.bot.messages.messages import *
from aiogram.fsm.context import FSMContext
from project.bot.states import *
from project.bot.keyboards.reply import *
from project.bot.Save import save
from datetime import datetime
import calendar

from project.bot.conecting_methods.transactions import delete_transaction, get_transactions
from project.bot.messages.mesage_transaction import PAGE_SIZE, get_paginated_transactions
from project.bot.keyboards.inline_transactions import (back_menu_or_list_transactions,
                                                       build_pagination_keyboard_for_delete, build_pagination_keyboard_for_show, confirm_or_cancel_buttons)
from project.bot.messages.mesage_transaction import user_pages

router=Router()
abb=["1","2","3","4","5","6","7","8"]
abo=["1","2"]
avtobus=["","","",""]

@router.message(or_f(F.text == "–î–æ–±a–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"))
async def add_transaction_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    open("show_categories.txt", "w").write(str(await save.update(user_id, "ADD_TRANSACTION")))
    try:
        await state.set_state(TransactionStates.in_add)
        await message.answer(
            reply_markup= await add_back_button(ReplyKeyboardMarkup(keyboard=[])),
            text=add_trans
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(StateFilter(TransactionStates.in_add))
async def add_after_transaction(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=await zapis_add()
        )
        await state.set_state(TransactionStates.waiting_for_transaction_description)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")


@router.message(F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def after_description(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üéâ–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(TransactionStates.waiting_for_transaction_description)
async def after_name(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id
    open("show_categories.txt", "w").write(str(await save.update(user_id, "SUM_DESCRIPTION")))
    try:
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
        await message.answer(
            "üéâ–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")


@router.message(TransactionStates.waiting_for_transaction_amount)
async def after_amount(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id
    open("show_categories.txt", "w").write(str(await save.update(user_id, "TRANSACTION_DESCRIPTION_DATA")))
    try:
        if name.isdigit():
            await state.set_state(TransactionStates.wait_date)
            await message.answer(
                "–£—Ä–∞! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Å—É–º–º—É! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É üìÖüòä",
                reply_markup=await doty_keyboard(),
                )
        else:
            await message.answer(
                text_no,
                )
            return

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")
        
@router.message(TransactionStates.wait_date)
async def after_date(message: Message, state: FSMContext):
    try:
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—åüòä\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")










@router.message(or_f(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
async def update_transaction_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        await state.set_state(TransactionStates.in_update_name)
        open("add_handler.txt", "w").write(str(await save.update(user_id, "ADD_TRANSACTION")))
        open("main44.txt", "w").write(str(await save.convert_to_json()))
        await message.answer(
            "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            "1. –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
            "2. –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
            "–∏—Ç–ø\n",
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(TransactionStates.in_update_name)
async def del_after_choos1(message: Message, state: FSMContext):
    try:
        await state.set_state(TransactionStates.in_update_cat)
        await message.answer(
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n\
            1. –Ω–∞–∑–≤–∞–Ω–∏–µ\n\
            2. –Ω–∞–∑–≤–∞–Ω–∏–µ\n\
            –∏—Ç–ø.\n",
            reply_markup= await skip_update_from_trans()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")


@router.message(TransactionStates.in_update_cat)
async def del_after_choos2(message: Message, state: FSMContext):
    try:
        await state.set_state(TransactionStates.update_for_transaction_description)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n",
            reply_markup= await skip_update_desk_from_trans()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")


@router.message(F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
async def del_after_choos3(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        avtobus[0]=name
        await state.set_state(TransactionStates.update_for_transaction_amount)
        await message.answer(
            "üéâ–ò–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:\n",
            reply_markup= await skip_update_amount_from_trans()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")
@router.message(TransactionStates.update_for_transaction_description)
async def del_after_choos4(message: Message, state: FSMContext):
    try:
        await state.set_state(TransactionStates.update_for_transaction_amount)
        await message.answer(
            "üéâ–ò–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:\n",
            reply_markup= await skip_update_amount_from_trans()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã")
async def del_after_choos5(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        avtobus[1]=name
        await state.set_state(TransactionStates.wait_date_update)
        await message.answer(
            "–£—Ä–∞!–¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏ –¥–∞—Ç—É üìÖüòä\n",
            reply_markup= await from_trans_skip_or_date()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(TransactionStates.update_for_transaction_amount)
async def del_after_choos6(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        await state.set_state(TransactionStates.wait_date_update)
        if(name.isdigit()):
            await message.answer(
                "–£—Ä–∞! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Å—É–º–º—É! –¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏ –¥–∞—Ç—É üìÖüòä\n",
                reply_markup= await from_trans_skip_or_date()
            )
        else:
            await message.answer(
                text_no
            )
            return
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")
@router.message(or_f(TransactionStates.wait_date_update,F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã"))
async def after_date_update(message: Message, state: FSMContext):
    name = message.text.strip()
    avtobus[2]=name
    try:
        if(avtobus[0]=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏" and avtobus[1]=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã" and avtobus[2]=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã"):
            await state.set_state(TransactionStates.update_no_sets)
            await message.answer(
                "üòï –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.\n –•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å?\n",
                reply_markup= await aboba_keyboard()
            )
        else:
            await state.clear()
            await message.answer(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—åüòä\n"
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
                reply_markup=await start_keyboard()
            )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(or_f(StateFilter(TransactionStates.update_no_sets),F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"))
async def set_type(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "üëå –í—Å—ë –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –µ—Å—Ç—å! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å üòä\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")







@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def delete_transaction_message(message: Message, state: FSMContext):
    await handle_delete_flow(message.from_user.id, message, state)

@router.callback_query(F.data == 'back_to_list_transactions')
async def back_to_list_callback(callback: CallbackQuery, state: FSMContext):
    await handle_delete_flow(callback.from_user.id, callback.message, state)

async def handle_delete_flow(user_id: int, message: Message, state: FSMContext):
    user_pages[user_id] = 0
    
    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_delete(0, total_pages, user_id)
        await message.answer('üôÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π! –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n\n'+message_text,
                           reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

@router.callback_query(F.data.startswith("transactionD_"))
async def handle_pagination_for_delete(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_transactions = await get_transactions(user_id)
        total_pages = (len(all_transactions) + PAGE_SIZE - 1) // PAGE_SIZE
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...
        new_page = await check_action(
            action=action,
            total_pages=total_pages,
            current_page=current_page,
            callback=callback,
            state=state,
            for_delete=True,
            all_transactions=all_transactions,
            user_id=user_id
        )
        if new_page is None:  
            return
            
        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_transactions(user_id, new_page)
        keyboard = await build_pagination_keyboard_for_delete(new_page, total_pages, user_id)
        
        await state.update_data(original_message=message_text)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data.startswith("select_transactionD_"))
async def handle_transaction_selection_for_delete(callback: CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split('_')[2])
    transaction_name = str(callback.data.split('_')[3])
    await state.update_data(selected_transaction_id=transaction_id)
    await state.update_data(selected_transaction_name=transaction_name)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    original_message = data.get('original_message', "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –±–∏–ª–¥–µ—Ä
    builder = await confirm_or_cancel_buttons()

    await callback.message.edit_text(
        text=f"{original_message}\n\n"
             f"–í—ã–±—Ä–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è : '{transaction_name}'\n"
             "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    transaction_id = data.get("selected_transaction_id")
    transaction_name = data.get("selected_transaction_name")

    if transaction_id is not None:
        res = await delete_transaction(transaction_id)
        if res:
            await callback.message.answer(
                text=f"üóë –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üòä\nüîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=await start_keyboard()
            )
            
    else:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    builder = await back_menu_or_list_transactions()
    await callback.message.answer("üôÇ –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            reply_markup=builder.as_markup())
    await state.clear()




@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π')
async def show_transactions(message: Message):
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_show(0, total_pages, user_id)
        await message.answer('üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–πüòä :\n\n'+message_text, reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

@router.callback_query(F.data.startswith("transactions_"))
async def handle_pagination_for_show(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_transactions = await get_transactions(user_id)
        total_pages = (len(all_transactions) + PAGE_SIZE - 1) // PAGE_SIZE
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = await check_action(action=action, total_pages=total_pages, current_page=current_page, callback=callback)
        
        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_transactions(user_id, new_page)
        keyboard = await build_pagination_keyboard_for_show(new_page, total_pages, user_id)
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
