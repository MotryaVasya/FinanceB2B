from typing import Union
from aiogram import Router, F
import re
from aiogram.filters import or_f,StateFilter,and_f
from aiogram.types import Message, CallbackQuery,ReplyKeyboardRemove
from project.bot.conecting_methods.category import get_categories
from project.bot.conecting_methods.methods import check_action
from project.bot.messages.messages import *
from aiogram.fsm.context import FSMContext
from project.bot.states import *
from project.bot.keyboards.reply import *
from project.bot.Save import save
from datetime import datetime
import calendar
import math
from project.bot.keyboards.inline_transactions import build_category_choice_keyboard, build_pagination_keyboard_for_categories
from project.bot.conecting_methods.transactions import create_transaction, delete_transaction, get_transactions,update_transaction,get_transaction
from project.bot.messages.mesage_transaction import PAGE_SIZE, get_paginated_transactions
from project.bot.keyboards.inline_transactions import (back_menu_or_list_transactions,
                                                       build_pagination_keyboard_for_delete,choose_buttons_update,build_pagination_keyboard_for_update ,build_pagination_keyboard_for_show, confirm_or_cancel_buttons)
from project.bot.messages.mesage_transaction import user_pages

router=Router()
abb=["1","2","3","4","5","6","7","8"]
abo=["1","2"]
avtobus=["","","",""]


class AddTransaction(StatesGroup):
    waiting_for_category = State()
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_confirmation = State()

@router.message(F.text == 'add transaction')
async def add_transaction_start(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    categories = await get_categories(message.from_user.id)

    if not categories:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    await state.update_data(all_categories=categories)
    user_pages[message.from_user.id] = 0

    try:
        message_text = await format_categories_page(categories, 0)
        total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        keyboard = await build_pagination_keyboard_for_categories(0, total_pages, message.from_user.id)

        await state.set_state(AddTransaction.waiting_for_category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n" + message_text,
            reply_markup=keyboard
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
async def format_categories_page(categories: list, page: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    start_idx = page * PAGE_SIZE
    page_categories = categories[start_idx:start_idx + PAGE_SIZE]

    formatted = []
    for cat in page_categories:
        try:
            name = cat['name_category'].encode('utf-8').decode('utf-8')
        except:
            name = cat['name_category']

        cat_type = '–î–æ—Ö–æ–¥' if cat['type'] == 1 else '–†–∞—Å—Ö–æ–¥'
        formatted.append(
            f"üîñ {name}\n"
            f"üìù –¢–∏–ø: {cat_type}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

    total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
    header = "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
    message = header + "\n\n".join(formatted)
    message += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}"

    return message

@router.callback_query(F.data.startswith("tx_categories_"), AddTransaction.waiting_for_category)
async def handle_pagination_for_categories(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[2]
        user_id = int(data_parts[3])
        current_page = user_pages.get(user_id, 0)

        state_data = await state.get_data()
        categories = state_data.get('all_categories', [])
        total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)

        if action == "choose":
            start_idx = current_page * PAGE_SIZE
            page_categories = categories[start_idx:start_idx + PAGE_SIZE]
            keyboard = await build_category_choice_keyboard(page_categories, user_id)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return

        elif action == "back":
            message_text = await format_categories_page(categories, current_page)
            keyboard = await build_pagination_keyboard_for_categories(current_page, total_pages, user_id)
            await callback.message.edit_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n" + message_text,
                reply_markup=keyboard
            )
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5":
            new_page = max(0, current_page - 5)  # –ù–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–∑–∞–¥ (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0)
        elif action == "forward5":
            new_page = min(total_pages - 1, current_page + 5)  # –ù–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –≤–ø–µ—Ä–µ–¥ (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞)
        elif action == "first":
            new_page = 0
        elif action == "last":
            new_page = total_pages - 1

        if new_page != current_page:
            user_pages[user_id] = new_page
            message_text = await format_categories_page(categories, new_page)
            keyboard = await build_pagination_keyboard_for_categories(new_page, total_pages, user_id)
            await callback.message.edit_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n" + message_text,
                reply_markup=keyboard
            )

        await callback.answer()

    except Exception as e:
        print(f"Error in handle_pagination_for_categories: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
@router.callback_query(F.data.startswith("addtx_category_"))
async def add_transaction_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[2])
    await state.update_data(category_id=category_id)
    await state.set_state(AddTransaction.waiting_for_amount)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    categories = await get_categories(callback.from_user.id)
    category = next((c for c in categories if c['id'] == category_id), None)

    if category:
        await state.update_data(category_name=category['name_category'])
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name_category']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50):",
            reply_markup=None
        )
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()

    await callback.answer()

@router.message(AddTransaction.waiting_for_amount)
async def add_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

        await state.update_data(amount=amount)
        await state.set_state(AddTransaction.waiting_for_description)

        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="addtx_skip_description")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
        builder.adjust(2)

        await message.answer(
            f"–°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=builder.as_markup()
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50):")

@router.callback_query(F.data == "addtx_skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description=None)
    await state.set_state(AddTransaction.waiting_for_date)
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
    builder.adjust(2)
    await callback.message.edit_text(
        "–û–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.message(AddTransaction.waiting_for_description)
async def add_transaction_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    await state.set_state(AddTransaction.waiting_for_date)

    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
    builder.adjust(2)

    await message.answer(
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "addtx_date_today")
async def set_date_today(callback: CallbackQuery, state: FSMContext):
    today = datetime.now().strftime("%Y-%m-%d")
    await state.update_data(date=today)
    await show_confirmation(callback, state)
    await callback.answer()

@router.callback_query(F.data == "addtx_date_custom")
async def ask_custom_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023-12-31):",
        reply_markup=None
    )
    await callback.answer()
@router.callback_query(F.data.startswith("calendar_"))
async def handle_calendar_actions(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    if action == "day":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        _, _, year, month, day = callback.data.split("_")
        selected_date = f"{year}-{month}-{day}"


        if int(day) < 10:
            selected_date = f"{year}-{month}-0{day}"
        if int(month) < 10:
            selected_date = f"{year}-0{month}-{day}"
        if int(month) < 10 and int(day) < 10:
            selected_date = f"{year}-0{month}-0{day}"

        await state.update_data(date=selected_date)
        await show_confirmation(callback, state)

    elif action == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 1:
            year -= 1
            month = 12
        else:
            month -= 1
        keyboard = generate_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    elif action == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 12:
            year += 1
            month = 1
        else:
            month += 1
        keyboard = generate_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    elif action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        data = await state.get_data()
        if 'date' not in data:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", show_alert=True)
            return
        await show_confirmation(callback, state)

    elif action == "cancel":
        # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await state.set_state(AddTransaction.waiting_for_date)
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
        builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
        builder.adjust(2)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=builder.as_markup()
        )

    await callback.answer()

async def show_confirmation(update: Union[Message, CallbackQuery], state: FSMContext):
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    date_str = data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    if date_str != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞':
        try:
            year, month, day = map(int, date_str.split('-'))
            date_str = f"{day} {get_month_name(month, case='genitive')} {year} –≥."
        except:
            pass
    message_text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–°—É–º–º–∞: {data.get('amount', 0):.2f} ‚ÇΩ\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–∞—Ç–∞: {data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="addtx_confirm")
    builder.button(text="‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="addtx_edit_category")
    builder.button(text="‚úèÔ∏è –°—É–º–º–∞", callback_data="addtx_edit_amount")
    builder.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="addtx_edit_description")
    builder.button(text="‚úèÔ∏è –î–∞—Ç–∞", callback_data="addtx_edit_date")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
    builder.adjust(2, 2, 2)

    if isinstance(update, Message):
        await update.answer(message_text, reply_markup=builder.as_markup())
    else:
        await update.message.edit_text(message_text, reply_markup=builder.as_markup())

    await state.set_state(AddTransaction.waiting_for_confirmation)

@router.callback_query(F.data.startswith("addtx_edit_"))
async def edit_transaction_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split('_')[2]

    if field == "category":
        categories = await get_categories(callback.from_user.id)
        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(
                text=category['name_category'],
                callback_data=f"addtx_category_{category['id']}"
            )
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_category)

    elif field == "amount":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50):",
            reply_markup=None
        )
        await state.set_state(AddTransaction.waiting_for_amount)

    elif field == "description":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="addtx_skip_description")
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_description)

    elif field == "date":
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
        builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
        builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_date)

    await callback.answer()

@router.callback_query(F.data == "addtx_back_to_confirm")
async def back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    await show_confirmation(callback, state)
    await callback.answer()

@router.callback_query(F.data == "addtx_confirm")
async def confirm_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        transaction_data = {
            "description": data.get('description'),
            "full_sum": data['amount'],
            "date": data.get('date', datetime.now().strftime("%Y-%m-%d")),
            "category_id": data['category_id'],
            'user_id': callback.from_user.id
        }

        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î
        await create_transaction(params={'user_id': callback.from_user.id}, data=transaction_data)

        await callback.message.edit_text(
            "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=None
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}",
            reply_markup=None
        )
    finally:
        await state.clear()
    await callback.answer()

@router.callback_query(F.data == "addtx_cancel")
async def cancel_transaction(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None
    )
    await callback.answer()

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def update_transaction_start(message: Message, state: FSMContext):
    """–®–∞–≥ 1: –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    user_id = message.from_user.id
    user_pages[user_id] = 0

    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        if total_pages == 0:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return

        keyboard = await build_pagination_keyboard_for_update(0, total_pages, user_id)
        await message.answer(
            "–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n" + message_text,
            reply_markup=keyboard
        )
        await state.set_state(TransactionStates.waiting_for_selection)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_transaction_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("transactionU_"), StateFilter(TransactionStates.waiting_for_selection))
async def handle_pagination_for_update(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    data_parts = callback.data.split('_')
    action = data_parts[1]
    user_id = int(data_parts[2])
    current_page = user_pages.get(user_id, 0)

    all_transactions = await get_transactions(user_id) # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(all_transactions) / PAGE_SIZE) if all_transactions else 1

    new_page = current_page

    if action == "prev":
            new_page = max(0, current_page - 1)
    elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)
    elif action == "back5":
            new_page = max(0, current_page - 5)
    elif action == "forward5":
            new_page = min(total_pages - 1, current_page + 5)
    elif action == "first":
            new_page = 0
    elif action == "last":
            new_page = total_pages - 1
    elif action == "choose":
             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = current_page * PAGE_SIZE
            page_transactions = all_transactions[start_idx : start_idx + PAGE_SIZE]
            if not page_transactions:
                 await callback.answer("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", show_alert=True)
                 return

            choose_keyboard = await choose_buttons_update(user_id, page_transactions)
            await callback.message.edit_reply_markup(reply_markup=choose_keyboard.as_markup())
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    elif action == "back": # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
             message_text, _ = await get_paginated_transactions(user_id, current_page, include_ids=False)
             keyboard = await build_pagination_keyboard_for_update(current_page, total_pages, user_id)
             await callback.message.edit_text(
                "–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n" + message_text,
                reply_markup=keyboard
            )
             await callback.answer()
             return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if new_page != current_page:
            user_pages[user_id] = new_page
            message_text, _ = await get_paginated_transactions(user_id, new_page, include_ids=False)
            keyboard = await build_pagination_keyboard_for_update(new_page, total_pages, user_id)
            await callback.message.edit_text(
                "–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n" + message_text,
                reply_markup=keyboard
            )

    await callback.answer()



@router.callback_query(F.data.startswith("select_transactionU_"), StateFilter(TransactionStates.waiting_for_selection))
async def handle_transaction_selection_for_update(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    try:
        parts = callback.data.split('_')
        if len(parts) < 3 or parts[0] != 'select' or parts[1] != 'transactionU':
            await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            await update_transaction_start(callback.message, state)
            return
        transaction_id = int(parts[2])
        original_data = await get_transaction(transaction_id)

        if not original_data:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.", show_alert=True)
            # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É
            await update_transaction_start(callback.message, state) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await state.update_data(
            transaction_id_to_update=transaction_id,
            original_data=original_data, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            updated_data={}              # –ó–¥–µ—Å—å –±—É–¥–µ–º –∫–æ–ø–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        )
        await state.set_state(TransactionStates.waiting_for_confirmation)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_update_confirmation_menu(callback.message, state)
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

async def show_update_confirmation_menu(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    """–®–∞–≥ 3: –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    data = await state.get_data()
    transaction_id = data.get('transaction_id_to_update')
    original = data.get('original_data', {})
    changes = data.get('updated_data', {})

    if not transaction_id or not original:
         # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª—É—á—à–µ –æ—Ç–º–µ–Ω–∏—Ç—å
         print("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ID –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è show_update_confirmation_menu")
         await state.clear()
         target_message = message_or_callback if isinstance(message_or_callback, Message) else message_or_callback.message
         await target_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=None)
         return

    category_id_to_show = changes.get('category_id', original.get('category_id'))
    # –¢–µ–ø–µ—Ä—å category_name_to_show –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ updated_data, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—É–¥–µ—Ç None, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–µ–Ω—è–ª–∞—Å—å
    category_name_to_show = None

    # –ï—Å–ª–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (—Ç.–µ. –æ–Ω–æ –Ω–µ –±—ã–ª–æ –≤ changes, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Ç–∞–∫),
    # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ original_data –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ ID
    if not category_name_to_show:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–º—è –∏–∑ original_data, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
        category_name_from_original = original.get('category_name')
        if category_name_from_original:
             category_name_to_show = category_name_from_original
        # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏ —É –Ω–∞—Å –µ—Å—Ç—å category_id, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ ID
        elif category_id_to_show is not None:
             user_id_for_categories = original.get('user_id') # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_id –µ—Å—Ç—å –≤ original_data
             if user_id_for_categories:
                 try:
                     categories = await get_categories(user_id_for_categories)
                     cat = next((c for c in categories if c.get('id') == category_id_to_show), None)
                     if cat:
                         category_name_to_show = cat.get('name_category', f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {category_id_to_show}") # –ë–µ—Ä–µ–º –∏–º—è –∏–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ–º ID
                     else:
                         category_name_to_show = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {category_id_to_show} (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)" # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                 except Exception as e:
                      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID {category_id_to_show}: {e}")
                      category_name_to_show = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ (ID: {category_id_to_show})"
             else:
                 category_name_to_show = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ—Ç user_id)" # –ù–µ—Ç user_id –≤ original_data

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–º—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if not category_name_to_show:
         category_name_to_show = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'



    amount_to_show = changes.get('full_sum', original.get('full_sum', 0))
    description_to_show = changes.get('description', original.get('description', ''))
    date_to_show_str = changes.get('date', original.get('date', ''))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_date = date_to_show_str
    if date_to_show_str and isinstance(date_to_show_str, str) and '-' in date_to_show_str:
        try:
            dt_obj = datetime.strptime(date_to_show_str.split('T')[0], '%Y-%m-%d') # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            display_date = f"{dt_obj.day} {get_month_name(dt_obj.month, case='genitive')} {dt_obj.year} –≥."
        except ValueError:
            display_date = date_to_show_str # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π


    confirmation_text = (
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (ID: {transaction_id})\n\n"
        f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ {'(—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)' if changes else ''}:\n"
        f"--------------------\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name_to_show}\n"
        f"–°—É–º–º–∞: {amount_to_show:.2f} ‚ÇΩ\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description_to_show if description_to_show else '-'}\n"
        f"–î–∞—Ç–∞: {display_date}\n"
        f"--------------------\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="update_edit_category")
    builder.button(text="‚úèÔ∏è –°—É–º–º—É", callback_data="update_edit_amount")
    builder.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="update_edit_description")
    builder.button(text="‚úèÔ∏è –î–∞—Ç—É", callback_data="update_edit_date")
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes:
        builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="update_confirm_changes")
    else:
        builder.button(text="–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç", callback_data="no_changes") # –ü—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="update_cancel")
    builder.adjust(2, 2, 1, 1) # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—è–¥–æ–≤


    target_message = message_or_callback if isinstance(message_or_callback, Message) else message_or_callback.message
    try:
        await target_message.edit_text(confirmation_text, reply_markup=builder.as_markup())
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ show_update_confirmation_menu: {e}")
        # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        # await target_message.answer(confirmation_text, reply_markup=builder.as_markup())


    await state.set_state(TransactionStates.waiting_for_confirmation)


@router.callback_query(F.data == "no_changes", StateFilter(TransactionStates.waiting_for_confirmation))
async def handle_no_changes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç'."""
    await callback.answer("–í—ã –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.", show_alert=False)


# --- –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π ---

# --- 4.1 –ö–∞—Ç–µ–≥–æ—Ä–∏—è ---
@router.callback_query(F.data == "update_edit_category", StateFilter(TransactionStates.waiting_for_confirmation))
async def edit_category_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    categories = await get_categories(user_id)
    if not categories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True)
        return

    await state.update_data(all_categories=categories)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    user_pages[f"{user_id}_update_cat"] = 0

    message_text, total_pages = await format_categories_page_update(categories, 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'update_cat_' –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = await build_pagination_keyboard_for_categories(0, total_pages, user_id, prefix="update_cat_")

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
        reply_markup=keyboard
    )
    await state.set_state(TransactionStates.waiting_for_new_category)
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Ç–æ–π, —á—Ç–æ –≤ Add)
async def format_categories_page_update(categories: list, page: int) -> tuple[str, int]:
    total_pages = math.ceil(len(categories) / PAGE_SIZE) if categories else 1
    start_idx = page * PAGE_SIZE
    page_categories = categories[start_idx : start_idx + PAGE_SIZE]

    formatted = [f"üîñ {cat.get('name_category', '–ë–µ–∑ –∏–º–µ–Ω–∏')}" for cat in page_categories]

    if not formatted:
        return "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", total_pages

    message = "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n" + "\n".join(formatted)
    message += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}"
    return message, total_pages

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
@router.callback_query(F.data.startswith("update_cat_"), StateFilter(TransactionStates.waiting_for_new_category)) # –§–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å update_cat_
async def handle_pagination_update_categories(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: update_cat_ACTION_USERID
        if len(data_parts) < 4:
             print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –≤ handle_pagination_update_categories: {callback.data}")
             await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
             return

        action = data_parts[2] # ACTION –Ω–∞ 3-–π –ø–æ–∑–∏—Ü–∏–∏
        user_id = int(data_parts[3]) # USERID –Ω–∞ 4-–π –ø–æ–∑–∏—Ü–∏–∏

        pagination_key = f"{user_id}_update_cat"
        current_page = user_pages.get(pagination_key, 0)

        state_data = await state.get_data()
        categories = state_data.get('all_categories', [])
        total_pages = math.ceil(len(categories) / PAGE_SIZE) if categories else 1

        new_page = current_page

        if action == "prev": new_page = max(0, current_page - 1)
        elif action == "next": new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5": new_page = max(0, current_page - 5)
        elif action == "forward5": new_page = min(total_pages - 1, current_page + 5)
        elif action == "first": new_page = 0
        elif action == "last": new_page = total_pages - 1
        elif action == "choose":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_idx = current_page * PAGE_SIZE
            page_categories = categories[start_idx : start_idx + PAGE_SIZE]
            if not page_categories:
                await callback.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", show_alert=True)
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'update_cat_select_' –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
            keyboard = await build_category_choice_keyboard_update(page_categories, user_id) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ build_category_choice_keyboard_update —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç builder.as_markup()
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "back" –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–µ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!)
        elif action == "back": # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "<" –∏–ª–∏ "<<", –Ω–µ "–ù–∞–∑–∞–¥" –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞
             pass


        if new_page != current_page:
            user_pages[pagination_key] = new_page
            message_text, _ = await format_categories_page_update(categories, new_page)
            keyboard = await build_pagination_keyboard_for_categories(new_page, total_pages, user_id, prefix="update_cat_")
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
                reply_markup=keyboard
            )

        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
async def build_category_choice_keyboard_update(categories: list, user_id: int):
    builder = InlineKeyboardBuilder()
    for category in categories:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'update_cat_select_' –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞
        builder.button(
            text=category['name_category'],
            callback_data=f"update_cat_select_{category['id']}"
        )
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"update_cat_categories_back_{user_id}")
    builder.adjust(2)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("update_cat_select_"), StateFilter(TransactionStates.waiting_for_new_category))
async def update_category_selected(callback: CallbackQuery, state: FSMContext):
     category_id = int(callback.data.split('_')[3]) # update_cat_select_ID
     state_data = await state.get_data()
     categories = state_data.get('all_categories', []) # –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
     category = next((c for c in categories if c['id'] == category_id), None)
     category_name = category['name_category'] if category else f"ID {category_id}"

     updated_data = state_data.get('updated_data', {})
     updated_data['category_id'] = category_id
     await state.update_data(updated_data=updated_data)

     await show_update_confirmation_menu(callback.message, state)
     await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {category_name}")

@router.callback_query(F.data.startswith("update_cat_categories_back_"), StateFilter(TransactionStates.waiting_for_new_category))
async def back_from_category_choice_to_pagination(callback: CallbackQuery, state: FSMContext):
        print(f"DEBUG: back_from_category_choice_to_pagination called with callback.data = {callback.data}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç
        data_parts = callback.data.split('_')
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: update_cat_categories_back_USERID
        if len(data_parts) < 5 or data_parts[0] != 'update' or data_parts[1] != 'cat' or data_parts[2] != 'categories' or data_parts[3] != 'back':
             print(f"DEBUG: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {callback.data}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç
             await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥.")
             return

        user_id = int(data_parts[4])
        print(f"DEBUG: Parsed user_id: {user_id}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç
        pagination_key = f"{user_id}_update_cat"
        current_page = user_pages.get(pagination_key, 0)
        print(f"DEBUG: Got current_page: {current_page} for key {pagination_key}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç

        state_data = await state.get_data()
        categories = state_data.get('all_categories', [])
        print(f"DEBUG: Got {len(categories)} categories from state.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç
        total_pages = math.ceil(len(categories) / PAGE_SIZE) if categories else 1
        print(f"DEBUG: Calculated total_pages: {total_pages}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç

        message_text, _ = await format_categories_page_update(categories, current_page)
        print("DEBUG: Formatted categories page.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç

        # build_pagination_keyboard_for_categories —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç prefix –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç as_markup()
        keyboard = await build_pagination_keyboard_for_categories(current_page, total_pages, user_id, prefix="update_cat_")
        print("DEBUG: Built pagination keyboard.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
            reply_markup=keyboard
        )
        print("DEBUG: Edited message with pagination.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        print("DEBUG: Answered callback.") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç

# --- 4.2 –°—É–º–º–∞ ---
@router.callback_query(F.data == "update_edit_amount", StateFilter(TransactionStates.waiting_for_confirmation))
async def edit_amount_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_new_amount)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
    try: await callback.message.delete()
    except Exception: pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=None
    )
    await callback.answer()

@router.message(StateFilter(TransactionStates.waiting_for_new_amount))
async def process_new_amount(message: Message, state: FSMContext):
    if message.text.lower() == '/cancel':
         await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
         # –ù—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
         await show_update_confirmation_menu(await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é..."), state)
         return

    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        state_data = await state.get_data()
        updated_data = state_data.get('updated_data', {})
        updated_data['full_sum'] = amount
        await state.update_data(updated_data=updated_data)

        await message.answer(f"–°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {amount:.2f} ‚ÇΩ.")
        await show_update_confirmation_menu(await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é..."), state)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50) –∏–ª–∏ /cancel"
        )


# --- 4.3 –û–ø–∏—Å–∞–Ω–∏–µ ---
@router.callback_query(F.data == "update_edit_description", StateFilter(TransactionStates.waiting_for_confirmation))
async def edit_description_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_new_description)
    try: await callback.message.delete()
    except Exception: pass
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=None
    )
    await callback.answer()

@router.message(StateFilter(TransactionStates.waiting_for_new_description))
async def process_new_description(message: Message, state: FSMContext):
    if message.text.lower() == '/cancel':
         await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
         await show_update_confirmation_menu(await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é..."), state)
         return

    description = message.text.strip()
    if not description:
        description = None
    state_data = await state.get_data()
    updated_data = state_data.get('updated_data', {})
    updated_data['description'] = description
    await state.update_data(updated_data=updated_data)

    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    await show_update_confirmation_menu(await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é..."), state)


# --- 4.4 –î–∞—Ç–∞ ---
@router.callback_query(F.data == "update_edit_date", StateFilter(TransactionStates.waiting_for_confirmation))
async def edit_date_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_new_date)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'update_date_' –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    keyboard = await get_calendar_keyboard(prefix="update_date_")
    await callback.message.edit_text(
        "üóì –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@router.callback_query(F.data.startswith("update_date_calendar_day"), StateFilter(TransactionStates.waiting_for_new_date))
async def handle_update_calendar_day_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        year, month, day = map(int, parts[-3:])
        selected_date = f"{year}-{month:02d}-{day:02d}" # –§–æ—Ä–º–∞—Ç YYYY-MM-DD

        state_data = await state.get_data()
        updated_data = state_data.get('updated_data', {})
        updated_data['date'] = selected_date
        await state.update_data(updated_data=updated_data)

        await show_update_confirmation_menu(callback.message, state)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        dt_obj = datetime.strptime(selected_date, '%Y-%m-%d')
        display_date = f"{dt_obj.day} {get_month_name(dt_obj.month, case='genitive')} {dt_obj.year} –≥."
        await callback.answer(f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {display_date}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (prev/next month)
@router.callback_query(F.data.startswith("update_date_"), StateFilter(TransactionStates.waiting_for_new_date))
async def handle_update_calendar_navigation(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: update_date_ACTION_...
        if len(parts) < 3: # –ú–∏–Ω–∏–º—É–º 3 —á–∞—Å—Ç–∏: update_date_ACTION
             print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {callback.data}")
             await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
             return

        action_type = parts[2] # ACTION —Ç–µ–ø–µ—Ä—å –Ω–∞ 3-–π –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å 2)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ prev –∏ next –∑–¥–µ—Å—å
        if action_type not in ["prev", "next"]:
             # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ prev –∏–ª–∏ next, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ day, confirm –∏–ª–∏ cancel,
             # –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
             # –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç callback –∑–¥–µ—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
             # –¢–∞–∫ –∫–∞–∫ day, confirm, cancel –∏–º–µ—é—Ç —Å–≤–æ–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —ç—Ç–æ—Ç else –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
             print(f"DEBUG: handle_update_calendar_navigation –ø–æ–ª—É—á–∏–ª –Ω–µ prev/next action: {callback.data}")
             await callback.answer() # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã
             return


        # –ü–∞—Ä—Å–∏–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü —Ç–æ–ª—å–∫–æ –¥–ª—è prev/next
        if len(parts) < 5: # update_date_ACTION_YEAR_MONTH -> –º–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π
             print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è prev/next –≤ handle_update_calendar_navigation: {callback.data}")
             await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
             return

        year, month = int(parts[3]), int(parts[4]) # YEAR –∏ MONTH –Ω–∞ 4-–π –∏ 5-–π –ø–æ–∑–∏—Ü–∏—è—Ö

        if action_type == "prev":
            month -= 1
            if month == 0:
                month = 12
                year -= 1
        elif action_type == "next":
            month += 1
            if month == 13:
                month = 1
                year += 1

        # –í—ã–∑—ã–≤–∞–µ–º generate_calendar —Å –ø–æ–ª–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        keyboard = generate_calendar(year, month, prefix="update_date_calendar_") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (update): {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

@router.callback_query(F.data == "update_date_calendar_confirm", StateFilter(TransactionStates.waiting_for_new_date))
async def handle_update_calendar_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
    # –î–∞—Ç–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ handle_update_calendar_day_selection
    data = await state.get_data()
    if 'date' not in data.get('updated_data', {}):
         await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.", show_alert=True)
         return

    await show_update_confirmation_menu(callback.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.answer("–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@router.callback_query(F.data == "update_cat_back_to_confirm", StateFilter(TransactionStates.waiting_for_new_category))
async def back_from_category_selection_to_confirm(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    await show_update_confirmation_menu(callback.message, state)
    await callback.answer()
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã
@router.callback_query(F.data == "update_date_calendar_cancel", StateFilter(TransactionStates.waiting_for_new_date))
async def handle_update_calendar_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏."""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
    await show_update_confirmation_menu(callback.message, state)
    await callback.answer("–í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.")

# --- –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –û—Ç–º–µ–Ω–∞ ---

@router.callback_query(F.data == "update_confirm_changes", StateFilter(TransactionStates.waiting_for_confirmation))
@router.callback_query(F.data == "update_confirm_changes")
async def confirm_update_changes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    data = await state.get_data()
    transaction_id = data.get("transaction_id_to_update")
    original_data = data.get("original_data", {})
    updated_data = data.get("updated_data", {})
    payload_to_send = original_data.copy()
    payload_to_send.update(updated_data)
    user_id = callback.from_user.id

    try:
        result = await update_transaction(transaction_id, payload_to_send, user_id)
        await callback.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=None
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ update_transaction
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}",
            reply_markup=None
        )
    finally:
        await state.clear()
    await callback.answer()


@router.callback_query(F.data == "update_cancel", StateFilter(TransactionStates))
async def cancel_update_process(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    await state.clear()
    await callback.message.edit_text("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    # await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=await start_keyboard())
    await callback.answer()





@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def delete_transaction_message(message: Message, state: FSMContext):
    await handle_delete_flow(message.from_user.id, message, state)

@router.callback_query(F.data == 'back_to_list_transactions')
async def back_to_list_callback(callback: CallbackQuery, state: FSMContext):
    await handle_delete_flow(callback.from_user.id, callback.message, state)

async def handle_delete_flow(user_id: int, message: Message, state: FSMContext):
    user_pages[user_id] = 0

    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_delete(0, total_pages, user_id)
        await message.answer('üôÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π! –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n\n'+message_text,
                           reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

@router.callback_query(F.data.startswith("transactionD_"))
async def handle_pagination_for_delete(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_transactions = await get_transactions(user_id)
        total_pages = (len(all_transactions) + PAGE_SIZE - 1) // PAGE_SIZE

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...
        new_page = await check_action(
            action=action,
            total_pages=total_pages,
            current_page=current_page,
            callback=callback,
            state=state,
            for_delete=True,
            all_transactions=all_transactions,
            user_id=user_id
        )
        if new_page is None:
            return

        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_transactions(user_id, new_page)
        keyboard = await build_pagination_keyboard_for_delete(new_page, total_pages, user_id)

        await state.update_data(original_message=message_text)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data.startswith("select_transactionD_"))
async def handle_transaction_selection_for_delete(callback: CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split('_')[2])
    # transaction_name = str(callback.data.split('_')[3]) # –ù–µ–Ω–∞–¥–µ–∂–Ω–æ
    # –õ—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ë–î –ø–æ transaction_id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –ª—É—á—à–µ –∏–º–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_transaction(id)
    all_user_transactions = await get_transactions(callback.from_user.id)
    selected_transaction = next((tx for tx in all_user_transactions if tx['id'] == transaction_id), None)

    if not selected_transaction:
         await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
         # –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É
         await handle_delete_flow(callback.from_user.id, callback.message, state)
         return

    transaction_name_for_message = selected_transaction.get('description', f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}")


    await state.update_data(selected_transaction_id=transaction_id)
    # await state.update_data(selected_transaction_name=transaction_name) # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –∏–º—è –ø–æ–ª—É—á–∞–µ–º –ø–æ ID

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
    # –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    # –õ—É—á—à–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    # data = await state.get_data()
    # original_message = data.get('original_message', "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    original_message = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π" # –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –±–∏–ª–¥–µ—Ä
    builder = await confirm_or_cancel_buttons()

    await callback.message.edit_text(
        text=f"{original_message}\n\n"
             f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å: '{transaction_name_for_message}'\n"
             "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    transaction_id = data.get("selected_transaction_id")
    # transaction_name = data.get("selected_transaction_name") # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

    if transaction_id is not None:
        try:
            res = await delete_transaction(transaction_id)
             # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ res, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            if res: # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ res != None –∏/–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
                await callback.message.answer(
                    text=f"üóë –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üòä",
                    reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–ª–∏ –∫ —Å–ø–∏—Å–∫—É
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await back_menu_or_list_transactions())
            else:
                 # –ï—Å–ª–∏ res –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö
                 await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.")

        except Exception as e: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTTPStatusError)
             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID {transaction_id}: {e}")
             await callback.message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

    else:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    # builder = await back_menu_or_list_transactions() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ handle_delete_flow
    await callback.message.answer("üôÇ –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            reply_markup=await back_menu_or_list_transactions()) # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å
    await state.clear()
    await callback.answer()



@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π')
async def show_transactions(message: Message):
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    try:
        # –£–±–∏—Ä–∞–µ–º include_ids=False, –µ—Å–ª–∏ get_paginated_transactions –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_show(0, total_pages, user_id)
        await message.answer('üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–πüòä :\n\n'+message_text, reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

@router.callback_query(F.data.startswith("transactions_"))
async def handle_pagination_for_show(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å total_pages
        all_transactions = await get_transactions(user_id)
        total_pages = math.ceil(len(all_transactions) / PAGE_SIZE) if all_transactions else 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É check_action, –Ω–æ –±–µ–∑ –µ–≥–æ –≤—ã–∑–æ–≤–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω)
        new_page = current_page
        if action == "prev": new_page = max(0, current_page - 1)
        elif action == "next": new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5": new_page = max(0, current_page - 5)
        elif action == "forward5": new_page = min(total_pages - 1, current_page + 5)
        elif action == "first": new_page = 0
        elif action == "last": new_page = total_pages - 1
        # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è 'choose'

        # if new_page is None: # check_action –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ choose/back, –∑–¥–µ—Å—å —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        #     return

        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if new_page != current_page:
             user_pages[user_id] = new_page
             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
             # –£–±–∏—Ä–∞–µ–º include_ids=False, –µ—Å–ª–∏ get_paginated_transactions –µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
             message_text, total_pages = await get_paginated_transactions(user_id, new_page)
             keyboard = await build_pagination_keyboard_for_show(new_page, total_pages, user_id)

             await callback.message.edit_text(message_text, reply_markup=keyboard)

        await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –≤ –∫–æ–Ω—Ü–µ

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")