from aiogram import types
from typing import Any, Dict, Optional, Union
from aiogram import Router, F
import re
from aiogram.filters import or_f,StateFilter,and_f
from aiogram.types import Message, CallbackQuery,ReplyKeyboardRemove
from project.bot.conecting_methods.category import get_categories
from project.bot.conecting_methods.methods import check_action
from project.bot.handlers.statistic import get_month_name
from project.bot.keyboards.calendar_keyboard import generate_calendar, generate_edit_calendar, get_calendar_keyboard, get_edit_calendar_keyboard
from project.bot.messages.messages import *
from aiogram.fsm.context import FSMContext
from project.bot.states import *
from project.bot.keyboards.reply import *
from project.bot.Save import save
from datetime import datetime
import calendar
from project.bot.keyboards.inline_transactions import build_category_choice_keyboard, build_pagination_keyboard_for_categories
from project.bot.conecting_methods.transactions import create_transaction, delete_transaction, get_transactions,update_transaction
from project.bot.messages.mesage_transaction import PAGE_SIZE, get_paginated_transactions
from project.bot.keyboards.inline_transactions import (back_menu_or_list_transactions,
                                                       build_pagination_keyboard_for_delete, build_pagination_keyboard_for_show, confirm_or_cancel_buttons)
from project.bot.messages.mesage_transaction import user_pages

router=Router()
abb=["1","2","3","4","5","6","7","8"]
abo=["1","2"]
avtobus=["","","",""]


class AddTransaction(StatesGroup):
    waiting_for_category = State()
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_confirmation = State()

@router.message(F.text == '–î–æ–±a–≤–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def add_transaction_start(message: Message, state: FSMContext):
    categories = await get_categories(message.from_user.id)
    
    if not categories:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    
    await state.update_data(all_categories=categories)
    user_pages[message.from_user.id] = 0
    
    try:
        message_text = await format_categories_page(categories, 0)
        total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        keyboard = await build_pagination_keyboard_for_categories(0, total_pages, message.from_user.id)
        
        await state.set_state(AddTransaction.waiting_for_category)
        await message.answer(
            "üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
            reply_markup=keyboard
        )
        await message.answer(
            "‚¨ÜÔ∏è‚¨ÜÔ∏è",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
async def format_categories_page(categories: list, page: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    start_idx = page * PAGE_SIZE
    page_categories = categories[start_idx:start_idx + PAGE_SIZE]
    
    formatted = []
    for cat in page_categories:
        try:
            name = cat['name_category'].encode('utf-8').decode('utf-8')
        except:
            name = cat['name_category']
        
        cat_type = '–î–æ—Ö–æ–¥' if cat['type'] == 1 else '–†–∞—Å—Ö–æ–¥'
        formatted.append(
            f"üîñ {name}\n"
            f"üìù –¢–∏–ø: {cat_type}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )
    
    total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
    header = "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
    message = header + "\n\n".join(formatted)
    message += f"\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}"
    
    return message

@router.callback_query(F.data.startswith("tx_categories_"), AddTransaction.waiting_for_category)
async def handle_pagination_for_categories(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[2]
        user_id = int(data_parts[3])
        current_page = user_pages.get(user_id, 0)
        
        state_data = await state.get_data()
        categories = state_data.get('all_categories', [])
        total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
        
        if action == "choose":
            start_idx = current_page * PAGE_SIZE
            page_categories = categories[start_idx:start_idx + PAGE_SIZE]
            keyboard = await build_category_choice_keyboard(page_categories, user_id)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
            
        elif action == "back":
            message_text = await format_categories_page(categories, current_page)
            keyboard = await build_pagination_keyboard_for_categories(current_page, total_pages, user_id)
            await callback.message.edit_text(
                text="üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
                reply_markup=keyboard
            )
            await callback.answer()
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)
        elif action == "back5":
            new_page = max(0, current_page - 5)  # –ù–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–∑–∞–¥ (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 0)
        elif action == "forward5":
            new_page = min(total_pages - 1, current_page + 5)  # –ù–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –≤–ø–µ—Ä–µ–¥ (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞)
        elif action == "first":
            new_page = 0
        elif action == "last":
            new_page = total_pages - 1
            
        if new_page != current_page:
            user_pages[user_id] = new_page
            message_text = await format_categories_page(categories, new_page)
            keyboard = await build_pagination_keyboard_for_categories(new_page, total_pages, user_id)
            await callback.message.edit_text(
                text="üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n" + message_text,
                reply_markup=keyboard
            )
            
        await callback.answer()
        
    except Exception as e:
        print(f"Error in handle_pagination_for_categories: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
@router.callback_query(F.data.startswith("addtx_category_"))
async def add_transaction_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[2])
    await state.update_data(category_id=category_id)
    await state.set_state(AddTransaction.waiting_for_amount)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    categories = await get_categories(callback.from_user.id)
    category = next((c for c in categories if c['id'] == category_id), None)
    
    if category:
        await state.update_data(category_name=category['name_category'])
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name_category']}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–ø–∏—Å–∏ üí∏\n"
            "–ü—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50\n",
            reply_markup=None
        )
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
    
    await callback.answer()

@router.message(AddTransaction.waiting_for_amount)
async def add_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            
        await state.update_data(amount=amount)
        await state.set_state(AddTransaction.waiting_for_description)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
        builder.adjust(2)
        
        await message.answer(
            f"–°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:",
            reply_markup=builder.as_markup()
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ üòî\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50 üí∞")

@router.callback_query(F.data == "addtx_skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description=None)
    await state.set_state(AddTransaction.waiting_for_date)
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
    builder.adjust(2)
    await callback.message.edit_text(
        "–û–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.message(AddTransaction.waiting_for_description)
async def add_transaction_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    await state.set_state(AddTransaction.waiting_for_date)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
    builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
    builder.adjust(2)
    
    await message.answer(
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "–£—Ä–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É üìÖüòä",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "addtx_date_today")
async def set_date_today(callback: CallbackQuery, state: FSMContext):
    today = datetime.now().strftime("%Y-%m-%d")
    await state.update_data(date=today)
    await show_confirmation(callback, state)
    await callback.answer()

@router.callback_query(F.data == "addtx_date_custom")
async def ask_custom_date(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = await get_calendar_keyboard()
    await callback.message.edit_text(
        "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=keyboard
    )
    await callback.answer()
@router.callback_query(F.data.startswith("calendar_"))
async def handle_calendar_actions(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    
    if action == "day":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        _, _, year, month, day = callback.data.split("_")
        selected_date = f"{year}-{month}-{day}"


        if int(day) < 10:
            selected_date = f"{year}-{month}-0{day}"
        if int(month) < 10:
            selected_date = f"{year}-0{month}-{day}"
        if int(month) < 10 and int(day) < 10:
            selected_date = f"{year}-0{month}-0{day}"

        await state.update_data(date=selected_date)
        await show_confirmation(callback, state)
        
    elif action == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 1:
            year -= 1
            month = 12
        else:
            month -= 1
        keyboard = generate_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    elif action == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 12:
            year += 1
            month = 1
        else:
            month += 1
        keyboard = generate_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    elif action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        data = await state.get_data()
        if 'date' not in data:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", show_alert=True)
            return
        await show_confirmation(callback, state)
        
    elif action == "cancel":
        # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await state.set_state(AddTransaction.waiting_for_date)
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
        builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
        builder.adjust(2)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()

async def show_confirmation(update: Union[Message, CallbackQuery], state: FSMContext):
    data = await state.get_data()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    date_str = data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    if date_str != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞':
        try:
            year, month, day = map(int, date_str.split('-'))
            date_str = f"{day} {get_month_name(month, case='genitive')} {year} –≥."
        except:
            pass
    
    message_text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ üìã\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–°—É–º–º–∞: {data.get('amount', 0):.2f} ‚ÇΩ\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–∞—Ç–∞: {date_str}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ? üòä\n"
        f"–ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.\n"
        f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å!"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="addtx_confirm")
    builder.button(text="‚úèÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="addtx_edit_category")
    builder.button(text="‚úèÔ∏è –°—É–º–º–∞", callback_data="addtx_edit_amount")
    builder.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="addtx_edit_description")
    builder.button(text="‚úèÔ∏è –î–∞—Ç–∞", callback_data="addtx_edit_date")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtx_cancel")
    builder.adjust(2, 2, 2)
    
    if isinstance(update, Message):
        await update.answer(message_text, reply_markup=builder.as_markup())
    else:
        await update.message.edit_text(message_text, reply_markup=builder.as_markup())
    
    await state.set_state(AddTransaction.waiting_for_confirmation)

@router.callback_query(F.data.startswith("addtx_edit_"))
async def edit_transaction_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split('_')[2]
    
    if field == "category":
        categories = await get_categories(callback.from_user.id)
        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(
                text=category['name_category'],
                callback_data=f"addtx_category_{category['id']}"
            )
        builder.button(text="< –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_category)
    
    elif field == "amount":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 150.50):",
            reply_markup=None
        )
        await state.set_state(AddTransaction.waiting_for_amount)
    
    elif field == "description":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="addtx_skip_description")
        builder.button(text="< –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_description)
    
    elif field == "date":
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="addtx_date_today")
        builder.button(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="addtx_date_custom")
        builder.button(text="< –ù–∞–∑–∞–¥", callback_data="addtx_back_to_confirm")
        builder.adjust(2)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AddTransaction.waiting_for_date)
    
    await callback.answer()

@router.callback_query(F.data == "addtx_back_to_confirm")
async def back_to_confirmation(callback: CallbackQuery, state: FSMContext):
    await show_confirmation(callback, state)
    await callback.answer()

@router.callback_query(F.data == "addtx_confirm")
async def confirm_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        transaction_data = {
            "description": data.get('description'),
            "full_sum": data['amount'],
            "date": data.get('date', datetime.now().strftime("%Y-%m-%d")),
            "category_id": data['category_id'],
            'user_id': callback.from_user.id
        }
        
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        await create_transaction(params={'user_id': callback.from_user.id}, data=transaction_data)
        
        await callback.message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}\n"+str(transaction_data),
            reply_markup=None
        )
    finally:
        await state.clear()
    await callback.answer()

@router.callback_query(F.data == "addtx_cancel")
async def cancel_transaction(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await start_keyboard()
    )
    await callback.answer()










@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def start_update_transaction(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    await state.set_state(UpdateTransactionForm.select_transaction)
    user_id = message.from_user.id
    user_pages[user_id] = 0

    try:
        transactions = await get_transactions(user_id)
        if not transactions:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        await show_transactions_page(message, user_id, 0, transactions)
        await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def show_edit_menu(
    source: Union[Message, CallbackQuery], 
    transaction: Dict[str, Any], 
    user_id: int
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚úèÔ∏è –°—É–º–º—É", callback_data="edit_transaction_amount")
    builder.button(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_transaction_description")
    builder.button(text="‚úèÔ∏è –î–∞—Ç—É", callback_data="edit_transaction_date")
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_transaction_update")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_transaction_update")
    
    builder.adjust(3, 2)
    
    text = await format_transaction_details(transaction)
    
    if isinstance(source, Message):
        await source.answer(text, reply_markup=builder.as_markup())
    else:
        await source.message.edit_text(text, reply_markup=builder.as_markup())

async def show_transactions_page(
    source: Union[Message, CallbackQuery],
    user_id: int,
    page: int,
    transactions: list
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    total_pages = max(1, (len(transactions) + PAGE_SIZE - 1) // PAGE_SIZE)
    start_idx = page * PAGE_SIZE
    page_transactions = transactions[start_idx:start_idx + PAGE_SIZE]
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    for tx in page_transactions:
        builder.button(
            text=f"{tx.get('category_name', '?')} | {float(tx.get('full_sum', 0)):.2f} ‚ÇΩ",
            callback_data=f"select_tx_{tx['id']}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tx_prev_{user_id}")
    if page < total_pages - 1:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tx_next_{user_id}")
    
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transaction_update")
    builder.adjust(1, *[1 for _ in page_transactions], 2, 1)
    
    text = f"üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å—Ç—Ä. {page + 1}/{total_pages}):"
    
    if isinstance(source, Message):
        await source.answer(text, reply_markup=builder.as_markup())
    else:
        await source.message.edit_text(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("tx_"))
async def handle_transaction_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        action = callback.data.split('_')[1]
        user_id = int(callback.data.split('_')[2])
        current_page = user_pages.get(user_id, 0)

        transactions = await get_transactions(user_id)
        total_pages = max(1, (len(transactions) + PAGE_SIZE - 1) // PAGE_SIZE)

        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)

        if new_page != current_page:
            user_pages[user_id] = new_page
            await show_transactions_page(callback, user_id, new_page, transactions)

        await callback.answer()
    except Exception as e:
        print(f"Transaction pagination error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("select_tx_"))
async def select_transaction_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        tx_id = int(callback.data.split('_')[2])
        user_id = callback.from_user.id

        transactions = await get_transactions(user_id)
        selected = next((tx for tx in transactions if tx['id'] == tx_id), None)

        if not selected:
            await callback.answer("‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await state.update_data(
            transaction_id=tx_id,
            current_transaction=selected
        )

        await show_edit_menu(callback, selected, user_id)
        await callback.answer()
    except Exception as e:
        print(f"Select transaction error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")

@router.callback_query(F.data == "edit_transaction_category")
async def start_category_selection(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(UpdateTransactionForm.select_category)
    user_id = callback.from_user.id

    categories = await get_categories(user_id)
    user_categories = [c for c in categories if c.get('user_id')]

    if not user_categories:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return

    await state.update_data(all_categories=user_categories)
    user_pages[user_id] = 0

    await show_categories_page(callback, user_id, 0, user_categories)
    await callback.answer()

async def show_categories_page(
    callback: CallbackQuery,
    user_id: int,
    page: int,
    categories: list
):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)
    start_idx = page * PAGE_SIZE
    page_categories = categories[start_idx:start_idx + PAGE_SIZE]
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for cat in page_categories:
        builder.button(
            text=f"{cat['name_category']} ({'üí∞' if cat['type'] == 1 else 'üí∏'})",
            callback_data=f"select_cat_{cat['id']}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_prev_{user_id}")
    if page < total_pages - 1:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"cat_next_{user_id}")
    
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_edit_menu")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transaction_update")
    
    builder.adjust(1, *[1 for _ in page_categories], 2, 2)
    
    text = (
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å—Ç—Ä. {page + 1}/{total_pages}):\n\n"
        f"üí∞ - –î–æ—Ö–æ–¥\nüí∏ - –†–∞—Å—Ö–æ–¥"
    )
    
    await safe_edit_message(callback, text, builder)

@router.callback_query(
    F.data.startswith("cat_"),
    UpdateTransactionForm.select_category
)
async def handle_category_pagination(callback: CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        action = callback.data.split('_')[1]
        user_id = int(callback.data.split('_')[2])
        current_page = user_pages.get(user_id, 0)

        data = await state.get_data()
        categories = data.get('all_categories', [])
        total_pages = max(1, (len(categories) + PAGE_SIZE - 1) // PAGE_SIZE)

        new_page = current_page
        if action == "prev":
            new_page = max(0, current_page - 1)
        elif action == "next":
            new_page = min(total_pages - 1, current_page + 1)

        if new_page != current_page:
            user_pages[user_id] = new_page
            await show_categories_page(callback, user_id, new_page, categories)

        await callback.answer()
    except Exception as e:
        print(f"Category pagination error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")

@router.callback_query(
    F.data.startswith("select_cat_"),
    UpdateTransactionForm.select_category
)
async def select_category_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        cat_id = int(callback.data.split('_')[2])
        data = await state.get_data()
        categories = data.get('all_categories', [])

        selected = next((c for c in categories if c['id'] == cat_id), None)
        if not selected:
            await callback.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = data['current_transaction'].copy()
        transaction.update({
            'category_id': selected['id'],
            'category_name': selected['name_category']
        })

        await state.update_data(current_transaction=transaction)
        await state.set_state(UpdateTransactionForm.confirmation)
        await show_edit_menu(callback, transaction, callback.from_user.id)
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected['name_category']}")
    except Exception as e:
        print(f"Select category error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")

@router.callback_query(F.data == "back_to_edit_menu")
async def back_to_edit_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    await state.set_state(UpdateTransactionForm.confirmation)
    await show_edit_menu(callback, data['current_transaction'], callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "confirm_transaction_update")
async def confirm_update_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        tx_data = data['current_transaction']
        user_id = callback.from_user.id

        # --- –ù–∞—á–∞–ª–æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –±–ª–æ–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã ---
        date_str = tx_data['date']
        # –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ date_str –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö.
        date_obj = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ (YYYY-MM-DDTHH:MM:SS)
            date_obj = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S")
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ YYYY-MM-DD —Å—Ä–∞–∑—É
            db_date = date_obj.strftime("%Y-%m-%d")
        except ValueError:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)
                date_obj = datetime.strptime(date_str, "%d.%m.%Y")
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ YYYY-MM-DD
                db_date = date_obj.strftime("%Y-%m-%d")
            except ValueError:
                 # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, —ç—Ç–æ –æ—à–∏–±–∫–∞
                await callback.message.edit_text(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.",
                    reply_markup=None
                )
                await state.clear()
                await callback.answer()
                return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ db_date –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD,
        # –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ

        # --- –ö–æ–Ω–µ—Ü –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –±–ª–æ–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã ---

        update_data = {
            "description": tx_data.get('description'),
            "full_sum": float(tx_data['full_sum']),
            "date": db_date, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ë–î
            "category_id": tx_data['category_id'],
        }
        # print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # !!! –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è update_transaction –∏ –ù–ï–¢ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ user_id !!!
        await update_transaction(
            transaction_id=data['transaction_id'],
            update_data=update_data,
            user_id=user_id
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º date_obj –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
        display_date = date_obj.strftime("%d.%m.%Y") # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        description_text = tx_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        category_name_text = tx_data.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


        await callback.message.answer(
            "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name_text}\n"
            f"üí∞ –°—É–º–º–∞: {float(tx_data['full_sum']):.2f} ‚ÇΩ\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_text}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}", reply_markup= await start_keyboard()
        )
        await state.clear()

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    finally:
        await callback.answer()

@router.callback_query(F.data == "cancel_transaction_update")
async def cancel_update_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                                  reply_markup=await start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@router.callback_query(F.data == "edit_transaction_amount")
async def edit_amount_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã"""
    await state.set_state(UpdateTransactionForm.new_value)
    await state.update_data(edit_field="amount")

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_edit_menu")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transaction_update")
    builder.adjust(2)

    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_transaction_description")
async def edit_description_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.set_state(UpdateTransactionForm.new_value)
    await state.update_data(edit_field="description")

    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back_to_edit_menu")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_transaction_update")
    builder.adjust(2)

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_transaction_date")
async def edit_date_handler(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    await state.set_state(UpdateTransactionForm.new_value)
    await state.update_data(edit_field="date")

    keyboard = await get_edit_calendar_keyboard()
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_calendar_"))
async def handle_edit_calendar_actions(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[2]
    
    if action == "day":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        _, _, _, year, month, day = callback.data.split("_")
        selected_date = f"{day}.{month}.{year}"  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        await process_field_update(callback, selected_date, state)
        
    elif action == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 1:
            year -= 1
            month = 12
        else:
            month -= 1
        keyboard = generate_edit_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        
    elif action == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        _, _, _, year, month = callback.data.split("_")
        year, month = int(year), int(month)
        if month == 12:
            year += 1
            month = 1
        else:
            month += 1
        keyboard = generate_edit_calendar(year, month)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data == "use_today_date")
async def use_today_date_handler(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã"""
    today = datetime.now().strftime("%d.%m.%Y")
    await process_field_update(callback, today, state)
    await callback.answer()

@router.message(UpdateTransactionForm.new_value)
async def process_new_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    await process_field_update(message, message.text, state)

async def process_field_update(
    source: Union[Message, CallbackQuery],
    value: str,
    state: FSMContext
):
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    field = data['edit_field']
    transaction = data['current_transaction'].copy()

    try:
        if field == "amount":
            new_value = float(value.replace(',', '.'))
            if new_value <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            transaction['full_sum'] = new_value
        elif field == "date":
            datetime.strptime(value, "%d.%m.%Y")  # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
            transaction['date'] = value
        else:
            transaction[field] = value

        await state.update_data(current_transaction=transaction)
        await state.set_state(UpdateTransactionForm.confirmation)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Message –∏–ª–∏ CallbackQuery)
        user_id = source.from_user.id if isinstance(source, Message) else source.from_user.id
        await show_edit_menu(source, transaction, user_id)

    except ValueError as e:
        error_msg = {
            "amount": "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)",
            "date": "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
        }.get(field, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        if isinstance(source, Message):
            await source.answer(error_msg)
        else:
            await source.message.answer(error_msg)


async def safe_edit_message(
    callback: CallbackQuery,
    text: str,
    reply_markup: Optional[InlineKeyboardBuilder] = None
):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup.as_markup() if reply_markup else None
        )
    except Exception as e:
        if "not modified" not in str(e):
            print(f"Error editing message: {e}")

async def format_transaction_details(transaction: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return (
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        f"1. üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
        f"2. üí∞ –°—É–º–º–∞: {float(transaction.get('full_sum', 0)):.2f} ‚ÇΩ\n"
        f"3. üìù –û–ø–∏—Å–∞–Ω–∏–µ: {transaction.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"4. üìÖ –î–∞—Ç–∞: {transaction.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')[:10]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )






@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
async def delete_transaction_message(message: Message, state: FSMContext):
    await handle_delete_flow(message.from_user.id, message, state)

@router.callback_query(F.data == 'back_to_list_transactions')
async def back_to_list_callback(callback: CallbackQuery, state: FSMContext):
    await handle_delete_flow(callback.from_user.id, callback.message, state)

async def handle_delete_flow(user_id: int, message: Message, state: FSMContext):
    user_pages[user_id] = 0
    
    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_delete(0, total_pages, user_id)
        await message.answer('üôÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π! –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n\n'+message_text,
                           reply_markup=keyboard)
        await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

@router.callback_query(F.data.startswith("transactionD_"))
async def handle_pagination_for_delete(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_transactions = await get_transactions(user_id)
        total_pages = (len(all_transactions) + PAGE_SIZE - 1) // PAGE_SIZE
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...
        new_page = await check_action(
            action=action,
            total_pages=total_pages,
            current_page=current_page,
            callback=callback,
            state=state,
            for_delete=True,
            all_transactions=all_transactions,
            user_id=user_id
        )
        if new_page is None:  
            return
            
        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_transactions(user_id, new_page)
        keyboard = await build_pagination_keyboard_for_delete(new_page, total_pages, user_id)
        
        await state.tdata(original_message=message_text)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data.startswith("select_transactionD_"))
async def handle_transaction_selection_for_delete(callback: CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split('_')[2])
    transaction_name = str(callback.data.split('_')[3])
    await state.update_data(selected_transaction_id=transaction_id)
    await state.update_data(selected_transaction_name=transaction_name)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    original_message = data.get('original_message', "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –±–∏–ª–¥–µ—Ä
    builder = await confirm_or_cancel_buttons()

    await callback.message.edit_text(
        text=f"{original_message}\n\n"
             f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å : '{transaction_name}'\n"
             "‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete_transaction(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    transaction_id = data.get("selected_transaction_id")
    transaction_name = data.get("selected_transaction_name")

    if transaction_id is not None:
        res = await delete_transaction(transaction_id)
        if res:
            await callback.message.answer(
                text=f"üóë –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üòä\nüîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=await start_keyboard()
            )
            
    else:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    builder = await back_menu_or_list_transactions()
    await callback.message.answer("üôÇ –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            reply_markup=builder.as_markup())
    await state.clear()

@router.callback_query(F.data == "back_to_menu")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    builder = await back_menu_or_list_transactions()
    await callback.message.answer("üôÇ–ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=await start_keyboard())
    await state.clear()




@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π')
async def show_transactions(message: Message):
    user_id = message.from_user.id
    user_pages[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    try:
        message_text, total_pages = await get_paginated_transactions(user_id, 0)
        keyboard = await build_pagination_keyboard_for_show(0, total_pages, user_id)
        await message.answer('üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–πüòä :\n\n'+message_text, reply_markup=keyboard)
        await message.answer(
        "‚¨ÜÔ∏è‚¨ÜÔ∏è",
        reply_markup=ReplyKeyboardRemove()
    )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

@router.callback_query(F.data.startswith("transactions_"))
async def handle_pagination_for_show(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        action = data_parts[1]
        user_id = int(data_parts[2])
        current_page = user_pages.get(user_id, 0)
        all_transactions = await get_transactions(user_id)
        total_pages = (len(all_transactions) + PAGE_SIZE - 1) // PAGE_SIZE
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = await check_action(action=action, total_pages=total_pages, current_page=current_page, callback=callback)
        
        user_pages[user_id] = new_page
        message_text, total_pages = await get_paginated_transactions(user_id, new_page)
        keyboard = await build_pagination_keyboard_for_show(new_page, total_pages, user_id)
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data == "show_cancel")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üôÇ–ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=await start_keyboard())
    await state.clear()