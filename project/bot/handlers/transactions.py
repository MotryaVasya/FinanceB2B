from aiogram import Router, F
import re
from aiogram.filters import or_f,StateFilter
from aiogram.types import Message, CallbackQuery
from project.bot.messages.messages import *
from aiogram.fsm.context import FSMContext
from project.bot.states import *
from project.bot.keyboards.reply import *
from project.bot.Save import save
from datetime import datetime
import calendar
router=Router()
abb=["1","2","3","4","5","6","7","8"]
def is_valid_string(s):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á—Ç–æ-–ª–∏–±–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    if re.search(r'[^\d]', s):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if re.search(r'[–∞-—è–ê-–Øa-zA-Z]', s):  # –ë—É–∫–≤—ã
            return False, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã"
        if re.search(r'[@#$%^&*()_+=\[\]{};:\'",<>/?\\|`~]', s):  # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            return False, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"
        if ' ' in s:  # –ü—Ä–æ–±–µ–ª—ã
            return False, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã"
        if re.search(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F700-\U0001F77F\U0001F780-\U0001F7FF\U0001F800-\U0001F8FF\U0001F900-\U0001F9FF\U0001FA00-\U0001FA6F\U0001FA70-\U0001FAFF\U00002702-\U000027B0]', s):
            return False, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º–∞–π–ª–∏–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–∫–∏"
        return False, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
    return True, "–°—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞"

@router.message(F.text == "–î–æ–±a–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def add_transaction(message: Message, state: FSMContext):
    try:
        await message.answer(
            add_trans
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(F.text.in_(abb))
async def add_after_transaction(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=await zapis_add()
        )
        await state.set_state(TransactionStates.waiting_for_transaction_description)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(TransactionStates.waiting_for_transaction_description)
async def after_name(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
        await message.answer(
            "üéâ–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:",

        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def after_description(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üéâ–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ø–µ—Ä—å —Å—É–º–º—É –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:"
        )
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(TransactionStates.waiting_for_transaction_amount)
async def after_amount(message: Message, state: FSMContext):
    name = message.text.strip()
    try:
        if(is_valid_string(name)==False):
            await message.answer(
                text_no,
                )
            return
        else:
            await state.set_state(TransactionStates.wait_date)
            await message.answer(
                "–£—Ä–∞! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Å—É–º–º—É! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É üìÖüòä",
                reply_markup=await doty_keyboard(),
                )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")
        
@router.message(TransactionStates.wait_date)
async def after_date(message: Message, state: FSMContext):
    try:
        await state.set_state(TransactionStates.waiting_for_transaction_amount)
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—åüòä\n"
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n",
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")









@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def update_transaction_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        open("add_handler.txt", "w").write(str(await save.update(user_id, "ADD_TRANSACTION")))
        open("main44.txt", "w").write(str(await save.convert_to_json()))
        await message.answer("–í —Å–∫–æ—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def del_transaction_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        open("add_handler.txt", "w").write(str(await save.update(user_id, "ADD_TRANSACTION")))
        open("main44.txt", "w").write(str(await save.convert_to_json()))
        await message.answer("–í —Å–∫–æ—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e.__class__.__name__}: {e}")


#@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π")
#async def show_transactions_list(message:Message, state:FSMContext):
#    user_id=Message.from_user.id
#    await save.update(user_id,"LIST_TRANSACTIONS")
#    try:
#        await
#    except Exception as e:
#        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
