from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from project.bot.states import TransactionStates,CategoryStates, Context
from aiogram.types import Message
from project.bot.messages.messages import *
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from project.bot.keyboards.reply import *
from project.bot.states import *
from project.bot.Save import save

router = Router()

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    user_id = message.from_user.id
    user_data_list = await save.get(user_id)
    open("main44.txt","w").write(str(await save.convert_to_json()))
    if user_data_list and len(user_data_list) > 1:
        previous_state = user_data_list[-1]
        user_data_list.pop()
        await save.get(user_id)
        open("main.txt","w").write(previous_state)
        state_actions = {
            "MENU": (
                "–¥–∞",
                await start_keyboard()
            ),
            "BALANCE": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
                await start_keyboard()
            ),
            "ADD_MONEY": (
                "üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: \n–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! üßò‚Äç‚ôÇÔ∏è\n",
                await add_back_button(await Money_keyboard())
            ),
            "MAIN_CATEGORY": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
                await start_keyboard()
            ),
            "MAIN_TRANSACTIONS": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
                await start_keyboard()
            ),
            "MAIN_HELP": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä",
                await start_keyboard()
            ),
            "ADD_CATEGORY": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
                cattegory_text,
                await add_back_button(get_categories_keyboard())
            ),
            "EDIT_CATEGORY": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
                cattegory_text,
                await add_back_button(get_categories_keyboard())
            ),
            "SHOW_CATEGORIES": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
                cattegory_text,
                await add_back_button(get_categories_keyboard())
            ),
            "AFTER_ADD": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
                cattegory_text,
                await add_back_button(get_categories_keyboard())
            ),
            "EDIT_SELECT_CATEGORY": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π!",
                cattegory_text,
                await add_back_button(get_all_categories())
            ),
            "ADD_TRANSACTION": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!",
                transaction_text,
                await add_back_button(get_transaction_keyboard())
            ),
            "SKIP_TRANSACTIONS": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!",
                transaction_text,
                await add_back_button(get_transaction_keyboard())
            ),
            "NOT_SKIP_TRANSACTIONS": (
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!",
                transaction_text,
                await add_back_button(get_transaction_keyboard())
            ),
            "handle_text_input": (
                f"‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{user_data.get(user_id, {}).get('current_category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
                await add_back_button(await make_skip_keyboard())
            ),
        }

        if previous_state in state_actions:
            text, reply_markup = state_actions[previous_state]
            await message.answer(text, reply_markup=reply_markup)
            await state.set_state(previous_state)
        else:
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=await start_keyboard())
    else:
        await message.answer("–ù–µ–∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.", reply_markup=await start_keyboard())

    
@router.message(or_f(CommandStart(), Command("restart")))
async def start_handler(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        open("menu.txt","w").write(str(await save.update(user_id, "MENU")))
        open("main44.txt","w").write(str(await save.convert_to_json()))
        await message.answer(
            welcome_text,
            reply_markup=await start_keyboard()
        )
    except Exception as e:  
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text==("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
async def start_handler_for_help(message: Message):
    try:
        await message.answer(
            pre_help,
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")