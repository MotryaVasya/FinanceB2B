from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import KeyboardButton,ReplyKeyboardRemove
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from project.bot.keyboards.reply import start_keyboard, help_keyboard, get_categories_keyboard, get_transaction_keyboard,get_all_categories,gety_type_keyboard,Money_keyboard,Afteradd_keyboard, make_save_keyboard, make_type_keyboard, make_skip_keyboard
router = Router()
user_categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ñ–∏–ª—å—ë"]
user_data = {}
waiting_for_category_name = State("waiting_for_category_name")
waiting_for_category_type = State("waiting_for_category_type")
help_text=("–ü—Ä–∏–≤–µ—Ç! üëã –í–æ—Ç –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n"
            "üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ‚Äî –¥–æ–±–∞–≤—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥.\n"
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —É–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∂—É –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤.\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî —É–∑–Ω–∞–µ—à—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é! üòä\n")

welcome_text = (
            "–ì–æ—Ç–æ–≤–æ! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "* üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "* üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "* üóÇ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
            "* üí∏ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "* ‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
        )
cattegory_text =(
            "üìÇ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏?‚Ä® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
"* ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
"* üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
"* ‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
"* üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
)
pre_help=("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n"
"–ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é? üòä\n")
pre_balance=("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n"
"–ß–µ–º –∑–∞–π–º—ë–º—Å—è –¥–∞–ª—å—à–µ? üòä\n")

def validate_name(name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –î–ª–∏–Ω–∞ –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    2. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
    3. –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ @#$% –∏ —Ç.–ø.
    4. –ù–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞)
    
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(name) == 0 or len(name) > 50:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–∫–≤–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞)
    if not name[0].isalnum():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã/–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è)
    for char in name:
        if not (char.isalnum() or char in (' ', '-', '_')):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if all(char.isdigit() for char in name if char.isalnum()):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞ (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
    if not any(char.isalpha() for char in name):
        return False
    
    return True


@router.message(or_f(CommandStart(), Command("restart"), F.text.in_(["–ù–∞–∑–∞–¥"])))
async def start_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            welcome_text,
            reply_markup=await start_keyboard()
        )
    except Exception as e:  
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")


@router.message(F.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            cattegory_text,
            reply_markup=await get_categories_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    try:
        category_name = message.text.strip()
        if not validate_name(category_name):
            await message.answer(
                "üòï –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"
                "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª:\n"
                "1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º ‚Äî –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "2. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤).\n"
                "3. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ @, #, $, % –∏ —Ç.–ø.\n"
            )
            return
        
        await message.answer(f"üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:\n")
        
        await state.set_state(waiting_for_category_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                             reply_markup=await gety_type_keyboard()
                             )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        print(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

        
@router.message(or_f(F.text == "–î–æ—Ö–æ–¥",F.text == "–†–∞—Å—Ö–æ–¥"))
async def after_add(message: Message):
    try:
        await message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é üòä"
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")


@router.message(F.text=="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö")
async def categories_handler(message: Message):
    try:
        await message.answer(
            "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
            reply_markup= await get_all_categories()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(or_f(F.text == "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",F.text=="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º"))
async def transaction_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:",
            reply_markup=await get_transaction_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    try:
        await message.answer(
            help_text,
            reply_markup=await help_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")


@router.message(F.text==("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
async def start_handler_for_help(message: Message):
    try:
        await message.answer(
            pre_help,
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
@router.message(F.text==("–üe—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
async def start_handler_for_help(message: Message):
    try:
        await message.answer(
            pre_balance,
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text=="–ë–∞–ª–∞–Ω—Å")
async def cash_handler(message: Message):
    text=(f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å: \n–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! üßò‚Äç‚ôÇÔ∏è\n ")
    try:
        await message.answer(
            text,
            reply_markup=await Money_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
@router.message(F.text=="–ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def  Add_money_handler(message: Message):
    text=(f"üí∞ –•–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n üè¶ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è! üí≥üìà\n ")
    try:
        await message.answer(
            text,
            reply_markup=await Afteradd_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        
        prev_text = message.reply_to_message.text if message.reply_to_message else ""
        
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏" in prev_text.lower():
            await categories_handler(message)
        elif "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏" in prev_text.lower():
            await transaction_handler(message)
        elif "–ø–æ–º–æ—â—å" in prev_text.lower():
            await help_handler(message)
        else:
            await start_handler(message)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
        await state.clear()
        await start_handler(message)


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
async def categories_handler(message: Message, state: FSMContext):
    try:
        await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(waiting_for_category_name)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")





async def make_categories_keyboard():
    builder = ReplyKeyboardBuilder()
    for category in user_categories:
        builder.add(KeyboardButton(text=category))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)



@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å")
async def show_categories(message: types.Message):
    try:
        await message.answer(
            "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup= await make_categories_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text.in_(user_categories))
async def select_category(message: types.Message):
    try:    
        user_data[message.from_user.id] = {"current_category": message.text}
        await message.answer(
            f"‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{message.text}' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
            reply_markup= await make_skip_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_name(message: types.Message):
    if not user_data.get(message.from_user.id):
        return await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
    try:
        await message.answer(
            "üîÑ –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Ç–∏–ø –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòä",
            reply_markup= await make_type_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}") 

@router.message(F.text.in_(["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]))
async def set_type(message: types.Message):
    if message.from_user.id in user_data:
        user_data[message.from_user.id]["type"] = message.text.lower()
    try:
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup= await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}") 

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await show_categories(message)

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_type(message: types.Message):
    try:
        await message.answer(
            "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
            reply_markup= await make_save_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}") 

@router.message(F.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
async def save_changes(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        category = user_data[user_id].get("current_category")
        new_type = user_data[user_id].get("type", "–Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
        try:
            await message.answer(
                f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
                f"–¢–∏–ø: {new_type}\n\n"
                "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}") 
        user_data.pop(user_id)
    else:
        await message.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", reply_markup=ReplyKeyboardRemove())

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message()
async def handle_text_input(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data and "current_category" in user_data[user_id]:
        old_name = user_data[user_id]["current_category"]
        user_data[user_id]["new_name"] = message.text
        try:
            await message.answer(
                f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å '{old_name}' –Ω–∞ '{message.text}'\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup= await make_type_keyboard()
            )
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}") 