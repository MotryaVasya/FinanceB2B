from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from project.bot.states import TransactionStates,CategoryStates, Context
from aiogram.types import Message
from project.bot.messages.messages import *
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from project.bot.keyboards.reply import *
from project.bot.states import *
import logging
router = Router()


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    user_id = message.from_user.id
    if user_id in user_state_history and len(user_state_history[user_id]) > 1:
        previous_state = user_state_history[user_id][-1]
        logging.info(f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ pop: {previous_state}")

        state_actions = {
            "MENU": (
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                await start_keyboard()
            ),
            "BALANCE": (
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ë–∞–ª–∞–Ω—Å'.",
                await Money_keyboard()
            ),
            "ADD_MONEY": (
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ë–∞–ª–∞–Ω—Å'.",
                await Money_keyboard()
            ),
            "TRANSACTIONS_MAIN": (
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'.",
                await get_transaction_keyboard()
            ),
            "ADD_TRANSACTION": (
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'.",
                await get_transaction_keyboard()
            ),
            CategoryStates.waiting_for_category_name.state: (
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                await add_back_button(ReplyKeyboardMarkup(keyboard=[[]], resize_keyboard=True))
            ),
            CategoryStates.waiting_for_category_type.state: (
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                await add_back_button(await gety_type_keyboard())
            ),
            TransactionStates.waiting_for_category_name.state: (
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                await add_back_button(await get_all_categories())
            ),
            Context.IN_CATEGORIES.state: (
                "–î–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
                await add_back_button(await get_categories_keyboard())
            ),
            Context.IN_TRANSACTIONS.state: (
                "–î–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:",
                await add_back_button(await get_transaction_keyboard())
            ),
            "handle_text_input": (
                f"‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{user_data.get(user_id, {}).get('current_category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
                await add_back_button(await make_skip_keyboard())
            ),
            "skip_name": (
                "üîÑ –•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —Ç–∏–ø –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üòä",
                await add_back_button(await make_type_keyboard())
            ),
            "set_type": (
                "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
                await add_back_button(await make_save_keyboard())
            ),
            "skip_type": (
                "‚ú® –í—Å—ë —Å—É–ø–µ—Ä! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è? üòä",
                await add_back_button(await make_save_keyboard())
            ),
            "show_categories": (
                "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                await add_back_button(await make_categories_keyboard())
            ),
            "select_category": (
                "üéâ –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! –ö–∞–∫—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                await add_back_button(await make_categories_keyboard())
            ),
            "show_categories_list": (
                "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
                await add_back_button(await get_all_categories())
            ),
        }

        if previous_state in state_actions:
            text, reply_markup = state_actions[previous_state]
            await message.answer(text, reply_markup=reply_markup)
        else:
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=await start_keyboard())
    else:
        await message.answer("–ù–µ–∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.", reply_markup=await start_keyboard())
    user_state_history.pop(user_id)
@router.message(or_f(CommandStart(), Command("restart")))
async def start_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            welcome_text,
            reply_markup=await start_keyboard()
        )
    except Exception as e:  
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text==("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
async def start_handler_for_help(message: Message):
    try:
        await message.answer(
            pre_help,
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")





#TODO —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ 2 –º–µ—Ç–æ–¥–∞(—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–Ω—Ç—É—é—Ç)
# @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
# async def add_handler(message: Message, state: FSMContext):
#     try:
#         current_state = await state.get_state()
        
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
#             await state.set_state(CategoryStates.waiting_for_category_name)
            
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await message.answer("üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                                 reply_markup=await get_all_categories())
            
#     except Exception as e:
#         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

# @router.message(F.text)
# async def handle_category_selection(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     categories = await get_all_categories()
#     category_names = [button.text for row in categories.keyboard for button in row]
    
#     if message.text in category_names:
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer(
#                 "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
#                 reply_markup=await get_all_categories()
#             )
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await state.update_data(selected_category=message.text)
#             keyboard = await skip_keyboard()

#             await message.answer(
#                 "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
#                 reply_markup=keyboard
#             )
#             await state.set_state(TransactionStates.waiting_for_transaction_description)
#     else:
#         pass
