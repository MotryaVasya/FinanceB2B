from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from project.bot.states import TransactionStates,CategoryStates, Context
from aiogram.types import Message
from project.bot.messages.messages import *
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from project.bot.keyboards.reply import *
router = Router()
user_data = {}


@router.message(or_f(CommandStart(), Command("restart"), F.text.in_(["–ù–∞–∑–∞–¥"])))
async def start_handler(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            welcome_text,
            reply_markup=await start_keyboard()
        )
    except Exception as e:  
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text==("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"))
async def start_handler_for_help(message: Message):
    try:
        await message.answer(
            pre_help,
            reply_markup=await start_keyboard()
        )
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    try:
        current_state = await state.get_state()

        # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if current_state == TransactionStates.waiting_for_transaction_amount:
            await state.set_state(TransactionStates.waiting_for_transaction_description)
            await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è", 
                               reply_markup=await skip_keyboard())
            return
            
        elif current_state == TransactionStates.waiting_for_transaction_description:
            await state.set_state(Context.IN_TRANSACTIONS)
            await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                               reply_markup=await get_transaction_keyboard())
            return
            
        # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif current_state == CategoryStates.waiting_for_category_type:
            await state.set_state(CategoryStates.waiting_for_category_name)
            await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                               "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            return
            
        # –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        elif current_state in [Context.IN_CATEGORIES, Context.IN_TRANSACTIONS]:
            await state.clear()
            await message.answer(welcome_text,
                               reply_markup=await start_keyboard())
            return
            

        else:
            await state.clear()
            await message.answer(reply_markup=await start_keyboard())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        await state.clear()
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
        await state.clear()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await start_keyboard()
        )



#TODO —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ 2 –º–µ—Ç–æ–¥–∞(—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–Ω—Ç—É—é—Ç)
# @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
# async def add_handler(message: Message, state: FSMContext):
#     try:
#         current_state = await state.get_state()
        
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
#             await state.set_state(CategoryStates.waiting_for_category_name)
            
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await message.answer("üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                                 reply_markup=await get_all_categories())
            
#     except Exception as e:
#         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

# @router.message(F.text)
# async def handle_category_selection(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     categories = await get_all_categories()
#     category_names = [button.text for row in categories.keyboard for button in row]
    
#     if message.text in category_names:
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer(
#                 "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
#                 reply_markup=await get_all_categories()
#             )
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await state.update_data(selected_category=message.text)
#             keyboard = await skip_keyboard()

#             await message.answer(
#                 "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
#                 reply_markup=keyboard
#             )
#             await state.set_state(TransactionStates.waiting_for_transaction_description)
#     else:
#         pass
