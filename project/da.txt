#TODO —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ 2 –º–µ—Ç–æ–¥–∞(—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–Ω—Ç—É—é—Ç)
# @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å")
# async def add_handler(message: Message, state: FSMContext):
#     try:
#         current_state = await state.get_state()
        
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
#             await state.set_state(CategoryStates.waiting_for_category_name)
            
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await message.answer("üí∏ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
#                                 reply_markup=await get_all_categories())
            
#     except Exception as e:
#         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")

# @router.message(F.text)
# async def handle_category_selection(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     categories = await get_all_categories()
#     category_names = [button.text for row in categories.keyboard for button in row]
    
#     if message.text in category_names:
#         if current_state == Context.IN_CATEGORIES.state:
#             await message.answer(
#                 "üìÇ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üòä",
#                 reply_markup=await get_all_categories()
#             )
#         elif current_state == Context.IN_TRANSACTIONS.state:
#             await state.update_data(selected_category=message.text)
#             keyboard = await skip_keyboard()

#             await message.answer(
#                 "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
#                 reply_markup=keyboard
#             )
#             await state.set_state(TransactionStates.waiting_for_transaction_description)
#     else:
#         pass
